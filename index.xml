<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Massimo Ronca ~ a reckless programmer with a sarcastic wit</title>
    <link>http://massimoronca.it/</link>
    <description>Recent content on Massimo Ronca ~ a reckless programmer with a sarcastic wit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://massimoronca.it/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing Ruby extensions in Go - an in depth review</title>
      <link>http://massimoronca.it/2015/10/12/writing-ruby-extensions-in-go---an-in-depth-review.html</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2015/10/12/writing-ruby-extensions-in-go---an-in-depth-review.html</guid>
      <description>

&lt;p&gt;For a very long time the only way to extend Ruby with native estensions has been using &lt;code&gt;C&lt;/code&gt;.&lt;br /&gt;
I don&amp;rsquo;t have the numbers with me, but I guess &lt;code&gt;C&lt;/code&gt; is not the first choice for Ruby programmers when they have to pick up a secondary/complentary language.&lt;br /&gt;
So I started investigating the possibility of writing them in other languages, taking advantage of the favorable moment: in the past 3-4 years we had an explosion of new languages that compile down to native code and can be easily used to produce a &lt;code&gt;C&lt;/code&gt; equivalent shared library that Ruby can pick up and load.&lt;/p&gt;

&lt;p&gt;My main goal was to find languages that a Ruby programmer would understand effortlessly or with a minimum investment.&lt;br /&gt;
This first episode will focus on Go.&lt;/p&gt;

&lt;h2 id=&#34;you-will-need-go-1-5-or-above:e8d41cd2ae3d619118c1ce574d5f3b9a&#34;&gt;You will need Go 1.5 or above&lt;/h2&gt;

&lt;p&gt;Up until version 1.4, there was really no point in building a native extension in Go, you&amp;rsquo;d have to create a &lt;code&gt;C&lt;/code&gt; proxy function for every Go function being called, at the point that there was literally no benefit compared to writing everything in pure &lt;code&gt;C&lt;/code&gt;.&lt;br /&gt;
With version 1.5, Go made a step forward, introducing the support for building shared objects; this opens up a lot of new possibilities for writing shared code that gets executed outside the Go environment, including Ruby.&lt;/p&gt;

&lt;h2 id=&#34;done-in-60-seconds:e8d41cd2ae3d619118c1ce574d5f3b9a&#34;&gt;Done in 60 seconds&lt;/h2&gt;

&lt;p&gt;This is all your &amp;ldquo;hello world&amp;rdquo; extension will just be:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/wstucco/7b0c424cf8dddbc8fd6a.js?file=hello_world.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;Compile it with&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/wstucco/7b0c424cf8dddbc8fd6a.js?file=build.sh&#34;&gt;&lt;/script&gt;
    

&lt;p&gt;Have I already told you that &lt;a href=&#34;https://github.com/ffi/ffi/wiki&#34;&gt;FFI&lt;/a&gt; is awesome?&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/wstucco/7b0c424cf8dddbc8fd6a.js?file=hello_world.rb&#34;&gt;&lt;/script&gt;

&lt;p&gt;There are a few things you need to pay attention to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is better to put &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt; on its own line, separated from other imports, we&amp;rsquo;ll see why in a moment&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//export&lt;/code&gt; is a special &lt;a href=&#34;https://golang.org/cmd/cgo/&#34;&gt;Cgo&lt;/a&gt; comment that instructs the compiler to emit a &lt;code&gt;C&lt;/code&gt; function with the same name and parameters. The name of the exported &lt;code&gt;C&lt;/code&gt; function must match the name of the Go function or it will fail. The comment must start exactly with &lt;code&gt;//export&lt;/code&gt;, no spaces anywhere.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;func main&lt;/code&gt; is required, but then ignored&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;autarchy-or-writing-extensions-the-hard-way:e8d41cd2ae3d619118c1ce574d5f3b9a&#34;&gt;Autarchy, or writing extensions the hard way&lt;/h2&gt;

&lt;p&gt;This could be all, but of course it is not.&lt;br /&gt;
Writing a Ruby extensions in a different language is one thing, writing it because the other language really offers some noticeable advantage, is entirely different.&lt;br /&gt;
As a base for this series of articles, I will port the &lt;a href=&#34;https://github.com/SamSaffron/fast_blank&#34;&gt;&lt;code&gt;fast_blank&lt;/code&gt;&lt;/a&gt; &lt;code&gt;C&lt;/code&gt; extension.&lt;br /&gt;
I&amp;rsquo;ve chosen it for very simple reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is deadly easy to port, even to languages that I&amp;rsquo;m not particularly familiar with&lt;/li&gt;
&lt;li&gt;it bundles a benchmark suite, so we can measure the performance gains/losses&lt;/li&gt;
&lt;li&gt;it is real life code that&amp;rsquo;s been downloaded a quarter million times so far&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For the impatients: you can clone the &lt;a href=&#34;https://github.com/mikamai/go_fast_blank&#34;&gt;repo of the &lt;code&gt;go_fast_blank&lt;/code&gt; gem on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if &lt;code&gt;FFI&lt;/code&gt; is great, it is still a dependency, that needs to be installed and maintained.&lt;br /&gt;
&lt;code&gt;C&lt;/code&gt; extensions are usually self contained and take advantage of the &lt;code&gt;MRI&lt;/code&gt; &lt;code&gt;C&lt;/code&gt; programming interface to build the necessary exported APIs.&lt;br /&gt;
Go has a very good support for interfacing to &lt;code&gt;C&lt;/code&gt; as you can see in this file&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/wstucco/7b0c424cf8dddbc8fd6a.js?file=go_fast_blank.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;There are some new tricks here, that need an explanation.&lt;br /&gt;
Just before &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt; we find what&amp;rsquo;s called &amp;ldquo;preamble&amp;rdquo; by Cgo, and it&amp;rsquo;s just &lt;code&gt;C&lt;/code&gt; code that the compiler put at the beginning of the generated file, as it is, before starting the compilation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: there must be no empty line between the end of the preamble and the &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt; directive or the compilation will fail.&lt;br /&gt;
that&amp;rsquo;s the reason why I told you to put &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt; on its own line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, the generated code will start with&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/wstucco/7b0c424cf8dddbc8fd6a.js?file=preamble.c&#34;&gt;&lt;/script&gt;

&lt;p&gt;You probably have guessed that the &lt;code&gt;C&lt;/code&gt; prefix gives access to the &lt;code&gt;C&lt;/code&gt; world directly from Go, with some added benefit: for example the &lt;code&gt;C.CString&lt;/code&gt; converts Go native strings to &lt;code&gt;C&lt;/code&gt; (&lt;code&gt;char*&lt;/code&gt;) strings. This function allocates memory, so you &lt;em&gt;must&lt;/em&gt; free the memory using &lt;code&gt;C.free&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We do that in &lt;code&gt;defer C.free(unsafe.Pointer(cs))&lt;/code&gt;, that tells Go to free the memory as soon as the surroinding function returns and is a very common pattern.&lt;br /&gt;
The pointer to the string is declared as &lt;code&gt;unsafe.Pointer&lt;/code&gt; because it does not belong to the Go world.&lt;/p&gt;

&lt;p&gt;Another thing you might have noticed is the reverse twin function &lt;code&gt;C.GoString&lt;/code&gt; that takes a &lt;code&gt;C&lt;/code&gt; string and returns a Go string.  In this case no memory is allocated, the GC takes care of everything, so no freeing is required.&lt;/p&gt;

&lt;p&gt;Some of the code just refers to the &lt;code&gt;MRI&lt;/code&gt; programming interface, defined in &lt;code&gt;ruby.h&lt;/code&gt; and related headers.&lt;br /&gt;
For example &lt;code&gt;C.VALUE&lt;/code&gt; is a macro for various types of pointers to data structures (from strings to function pointers) and &lt;code&gt;C.rb_define_method&lt;/code&gt; defines a new method.&lt;br /&gt;
It takes four parameters: the class to which the method belongs to (in this case &lt;code&gt;C.rb_cString&lt;/code&gt; which is the Ruby equivalent of the builtin &lt;code&gt;String&lt;/code&gt; class), the name of the method (in this case &lt;code&gt;blank?&lt;/code&gt;) a callback and the number of arguments (zero in our case).&lt;/p&gt;

&lt;p&gt;Basically we are writing something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class String
    def blank?
    ...
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third argument of &lt;code&gt;C.rb_define_method&lt;/code&gt; is the &lt;code&gt;C&lt;/code&gt; function that gets executed when the method is invoked on the Ruby side.&lt;br /&gt;
The Go runtime and the &lt;code&gt;C&lt;/code&gt; code are executed in different threads, with different stacks, it it prohibited to pass a pointer to Go code to &lt;code&gt;C&lt;/code&gt;, so we can&amp;rsquo;t take a pointer to a Go function and simly pass it to &lt;code&gt;C&lt;/code&gt;, because it won&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;There is a workaround, we can &lt;code&gt;//export&lt;/code&gt; our Go function and pass the pointer to it instead, after casting it to &lt;code&gt;*[0]byte&lt;/code&gt; (the Go equivalent of &lt;code&gt;void*&lt;/code&gt;): &lt;code&gt;(*[0]byte)(C.go_fast_blank)&lt;/code&gt;.&lt;br /&gt;
There is only a small problem: &lt;code&gt;C.go_fast_blank&lt;/code&gt; does not exists until the &lt;code&gt;C&lt;/code&gt; files are compiled, so we cannot implicitly refer to it.&lt;br /&gt;
We need to add a forward declaration to tell the compiler we know this function exists and it&amp;rsquo;s imlpemented somewhere else outside here.&lt;br /&gt;
That&amp;rsquo;s what the line &lt;code&gt;extern inline VALUE go_fast_blank(VALUE);&lt;/code&gt; is for, and it&amp;rsquo;s a standar declaration for &lt;code&gt;rb_define_method&lt;/code&gt; callbacks (&lt;code&gt;function_name(VALUE) -&amp;gt; VALUE&lt;/code&gt;).&lt;br /&gt;
The rest is quite straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gs := C.GoString(C.rb_string_value_cstr(&amp;amp;s))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a &lt;code&gt;VALUE&lt;/code&gt; convert it to a &lt;code&gt;C&lt;/code&gt; string and then convert the result to a Go string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if gs == &amp;quot;&amp;quot; || strings.TrimLeftFunc(gs, unicode.IsSpace) == &amp;quot;&amp;quot; {
    return C.Qtrue
}

return C.Qfalse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the string is empty or after removing all the unicode spaces on the left side, it is still empty, we found a blank string. Otherwise we return false.&lt;br /&gt;
&lt;code&gt;Qtrue&lt;/code&gt; and &lt;code&gt;Qfalse&lt;/code&gt; are just two &lt;code&gt;C&lt;/code&gt; #defines that map to a Ruby boolean.&lt;/p&gt;

&lt;p&gt;Each extension has an &lt;code&gt;Init&lt;/code&gt; function, and it&amp;rsquo;s automatically called when the extension is &lt;code&gt;require&lt;/code&gt;d.&lt;br /&gt;
The name of the function must be &lt;code&gt;Init_#{extension_name}&lt;/code&gt;, in our case &lt;code&gt;Init_go_fast_blank&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Last but not least, to compile our self contained extension, we need to pass some flags to the compiler. We&amp;rsquo;ll do it using a specific Cgo comment: &lt;code&gt;#cgo&lt;/code&gt;.&lt;br /&gt;
just before the &lt;code&gt;#include &amp;quot;ruby.h&amp;quot;&lt;/code&gt; add these lines&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;
#cgo: CFLAGS: -I#{RbConfig::CONFIG[&#39;rubyhdrdir&#39;]} -I#{RbConfig::CONFIG[&#39;rubyarchhdrdir&#39;]}
#cgo: LDFLAGS: -L#{RbConfig::CONFIG[&#39;libdir&#39;]} #{RbConfig::CONFIG[&#39;LIBRUBYARG&#39;]}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The interpolation codes must be replaced with the actual value.&lt;br /&gt;
I&amp;rsquo;ve put it there for reference.&lt;br /&gt;
Hint: the output must have &lt;code&gt;.bundle&lt;/code&gt; extension and not &lt;code&gt;.so&lt;/code&gt; as we did before, othewise Ruby will refuse to laod it.&lt;br /&gt;
In the &lt;a href=&#34;https://github.com/mikamai/go_fast_blank&#34;&gt;repo of the &lt;code&gt;go_fast_blank&lt;/code&gt; gem&lt;/a&gt; you can find an ad hoc &lt;code&gt;extconf.rb&lt;/code&gt; that will take care of everything.&lt;/p&gt;

&lt;h2 id=&#34;race-for-the-prize-https-www-youtube-com-watch-v-bs56ygzplqa:e8d41cd2ae3d619118c1ce574d5f3b9a&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bs56ygZplQA&#34;&gt;Race for the prize&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Now we have a compiled, native, Ruby extension, launch &lt;code&gt;irb&lt;/code&gt; and type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;2.2.2 :001 &amp;gt; require &#39;go_fast_blank&#39;
go_fast_blank init
 =&amp;gt; true 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see our extension announcing itself by printing &lt;code&gt;go_fast_blank init&lt;/code&gt;.&lt;br /&gt;
It&amp;rsquo;s time to measure the performances and comment the results.&lt;br /&gt;
After launching &lt;code&gt;benchmark&lt;/code&gt;, the numbers are:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/4YddNT2.png&#34; alt=&#34;Ruby VS Go&#34; title=&#34;Ruby VS Go&#34; /&gt;&lt;br /&gt;
Go is between 2 and 4 times slower than the original Ruby implementation!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/48BOGlI.png&#34; alt=&#34;GO, Y U SO SLOW&#34; title=&#34;Y U SO SLOW?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well, first of all Go is not only slower than Ruby, but it&amp;rsquo;s plateuing, looks like the speed
of the Go extension is not influenced byt the length of the string, but it&amp;rsquo;s just going as fast as it can,
and that is the fastest speed possible.&lt;br /&gt;
A loss in performance was to be expected, Go generate code that interacts with its memory manager and scheduler, it is somewhat in between Java and compiled languages.&lt;br /&gt;
But honestly actually running slower than Ruby code was a real surprise.&lt;br /&gt;
According to this &lt;a href=&#34;https://groups.google.com/forum/#!msg/golang-nuts/RTtMsgZi88Q/61hgyGSkWiQJ&#34;&gt;Russ Cox answer&lt;/a&gt;, calling &lt;code&gt;C&lt;/code&gt; from Go has an aoverhead
similar to calling ten Go functions, looks like Go is one of those languages that can run faster ported code, than calling
the &lt;code&gt;C&lt;/code&gt; implementation.&lt;br /&gt;
If every function call counts for ten, it&amp;rsquo;s no wonder that calling it thousands of time in a tight loop, would cause such
a tremendous loss in performances.&lt;br /&gt;
To test this assumption, I moved the tight loop from Ruby to the Go extension: I ran the same comparison one thousand times
inside a Go loop and the same I did on the Ruby side.&lt;br /&gt;
These are the new results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/hCDdCfA.png&#34; alt=&#34;Ruby VS Go updated&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This time Go ran a bit faster, but with long strings the same slowness arises.&lt;br /&gt;
I suspect the conversions routines from Ruby VALUE to Go strings are responsible for most of the overhead.&lt;br /&gt;
Removing it from the equation gave me much better results (between 300 and 16 times faster than Ruby), but it&amp;rsquo;s a low level optimization that makes sense only for three lines functions that are called over and over again, like this one.&lt;br /&gt;
These numbers are not to be taken as a real benchmark, they are just the results of a micro benchmark and are not representetive of real performances in a real world application.
But they clearly show that running Go in a tight loop has a serious performance overhead, while if you delegate to
Go some heavy lifting work, it can give some performance boost.&lt;/p&gt;

&lt;h2 id=&#34;conclusions:e8d41cd2ae3d619118c1ce574d5f3b9a&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Writing Ruby extensions in Go, especially in conjunction with the great &lt;code&gt;FFI&lt;/code&gt; library, can be real fun.&lt;br /&gt;
You got the feeling of &lt;em&gt;&amp;ldquo;scripting Ruby&amp;rdquo;&lt;/em&gt; without any of the drawbacks of writing low level &lt;code&gt;C&lt;/code&gt; code.&lt;br /&gt;
Writing completely auto contained extensions, it&amp;rsquo;s a lot more work, but it&amp;rsquo;s more tedious than hard.
The situation could improve vastly when someone will wrap the Ruby programming interface in a nice Go package to hide the &lt;code&gt;C&lt;/code&gt; inheritance and maybe
write a &lt;a href=&#34;https://blog.golang.org/generate&#34;&gt;&lt;code&gt;go:generate&lt;/code&gt;&lt;/a&gt; plugin to automate all the boilperplate code (for example
exporting the functions to &lt;code&gt;C&lt;/code&gt;). But in the end it is still a lot easier than writing pure &lt;code&gt;C&lt;/code&gt;.&lt;br /&gt;
Perfomance wise though, I&amp;rsquo;m doubtful that you could have some gain just by rewriting parts of you app in Go.&lt;br /&gt;
It is in fact quite possibly the opposite.&lt;br /&gt;
Go has a performance problem when intercating with &lt;code&gt;C&lt;/code&gt; and it&amp;rsquo;s by design.&lt;/p&gt;

&lt;p&gt;However, there could be patterns where Go could be really helpful.&lt;br /&gt;
I&amp;rsquo;m sure Go channles and concurrency are worth exploring.&lt;br /&gt;
Maybe in a next episode.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A month with Atom: my first package</title>
      <link>http://massimoronca.it/2015/07/27/a-month-with-atom-my-first-package.html</link>
      <pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2015/07/27/a-month-with-atom-my-first-package.html</guid>
      <description>&lt;p&gt;Exactly one month ago, Github relaesed version 1.0 of their open source editor Atom.
 Giovanni &lt;a href=&#34;http://dev.mikamai.com/post/122755410549/a-month-long-atom-test-drive-from-an-emacs-fanatic&#34;&gt;already blogged&lt;/a&gt; &lt;a href=&#34;http://dev.mikamai.com/post/124331931184/atom-18-days-in&#34;&gt;about it&lt;/a&gt;, from the perspective of a long time Emacs lover: Atom still has a long way to go, but he also admitted that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are several things going for Atom though. Coffeescript is a more popular language than Lisp, also, I know it better, so writing my own Atom extensions won’t be as hard as writing my Emacs extensions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve never been proficient enough with Lisp to write a package for Emacs, and Vimscript is really too hackish for the undisciplined developer I am.&lt;br /&gt;
I know Javascript better, but I don&amp;rsquo;t love it.&lt;br /&gt;
Atom packages can be written in Coffeescript, a language that I really enjoy.&lt;br /&gt;
Language alone is surely not enough to declare that writing a package is going to be easy, but it gave me the confidence to try.&lt;/p&gt;

&lt;p&gt;Our package will be very simple: it will put a live clock on the right side of the status bar that can be toggled on and off.&lt;/p&gt;

&lt;p&gt;To begin, we create a &lt;code&gt;status-bar-clock&lt;/code&gt; folder inside &lt;code&gt;~/.atom/packages/&lt;/code&gt; and add a &lt;code&gt;package.json&lt;/code&gt;, in the same way we dot for regular node packages.&lt;br /&gt;
Atom added a &lt;a href=&#34;https://atom.io/docs/v0.186.0/creating-a-package#packagejson&#34;&gt;few unique keys&lt;/a&gt;, where &lt;code&gt;main&lt;/code&gt; is the only one required and points to the entry point of our package.&lt;/p&gt;

&lt;p&gt;The base version of our &lt;code&gt;package.json&lt;/code&gt; will look like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;status-bar-clock&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;./lib/status-bar-clock&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Show a clock inside the status bar&amp;quot;,
  &amp;quot;repository&amp;quot;: &amp;quot;https://github.com/wstucco/status-bar-clock&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;engines&amp;quot;: {
    &amp;quot;atom&amp;quot;: &amp;quot;&amp;gt;=1.0.0 &amp;lt;2.0.0&amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we create the package main and put it in &lt;code&gt;lib/ststus-bar-clock.coffee&lt;/code&gt;.&lt;br /&gt;
Atom packages are simple objects that implement the two methods &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt;; only &lt;code&gt;activate&lt;/code&gt; is required, &lt;code&gt;deactivate&lt;/code&gt; is called when the package is removed or deactivated from the preferences and is useful to clean up: in OO terms it&amp;rsquo;s the destructor.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start with the most basic package possible&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;module.exports = StatusBarClock =
  activate: (state) -&amp;gt;
    console.log &#39;Clock was activated&#39;
  deactivate: -&amp;gt;
    console.log &#39;Clock was deactivated&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save it and press &lt;code&gt;ctrl-alt-cmd-l&lt;/code&gt;, it will reload the editor, including our package code. If you open up the developer tools with &lt;code&gt;cmd-alt-i&lt;/code&gt; you should see the message &lt;code&gt;Clock was activated&lt;/code&gt; in the console.&lt;br /&gt;
If you disable the package from the preferences, the message &lt;code&gt;Clock was deactivated&lt;/code&gt; will show up.&lt;br /&gt;
We&amp;rsquo;re in business!&lt;/p&gt;

&lt;p&gt;Enabling and disabling the package from the preferences is not very convenient, moreover it&amp;rsquo;s not what we really want, we just want to toggle the clock on or off, without having to disable the entire package.&lt;br /&gt;
We&amp;rsquo;ll add a keyboard shortcut, &lt;code&gt;keymaps&lt;/code&gt; in Atom: keymaps are &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;cson&lt;/code&gt; files inside the &lt;code&gt;keymaps&lt;/code&gt; folder (for documentation &lt;a href=&#34;https://atom.io/docs/latest/behind-atom-keymaps-in-depth&#34;&gt;see here&lt;/a&gt;).
We bind the toggle command to &lt;code&gt;ctrl-alt-t&lt;/code&gt; (the same action should be present in the action menu if you press &lt;code&gt;cmd-shift-p&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;# keymaps/status-bar-clock.cson
&#39;atom-workspace&#39;:
  &#39;ctrl-alt-t&#39;: &#39;status-bar-clock:toggle&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we declared the mapping between keys and commands, we write the code to handle it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;note: the binding will only work if we are inside the Atom workspace, so if, for example, the developer console has the focus, the binding won&amp;rsquo;t work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;{CompositeDisposable} = require &#39;atom&#39;

module.exports = StatusBarClock =
  active: false

  activate: (state) -&amp;gt;
    @subscriptions = new CompositeDisposable
    # Register command that toggles this view
    @subscriptions.add atom.commands.add &#39;atom-workspace&#39;, &#39;status-bar-clock:toggle&#39;: =&amp;gt; @toggle()

    console.log &#39;Clock was activated&#39;
  deactivate: -&amp;gt;
    console.log &#39;Clock was deactivated&#39;

  toggle: -&amp;gt;
    console.log &#39;Clock was toggled on&#39; if @active
    console.log &#39;Clock was toggled off&#39; if !@active

    @active = ! !!@active
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to add the message to the status bar, the status bar in Atom is a &lt;code&gt;service&lt;/code&gt; and exposes an API that can be consumed.&lt;br /&gt;
We declare this dependency in &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;consumedServices&amp;quot;: {
    &amp;quot;status-bar&amp;quot;: {
      &amp;quot;versions&amp;quot;: {
        &amp;quot;^1.0.0&amp;quot;: &amp;quot;consumeStatusBar&amp;quot;
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the status bar is initialized, it will call a method in our package, passing an instance of itself as parameter.&lt;br /&gt;
Status bar API docs can be found &lt;a href=&#34;https://github.com/atom/status-bar&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;
consumeStatusBar: (statusBar) -&amp;gt;
  @statusBar = statusBar

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Status bar can display different blocks called &lt;code&gt;titles&lt;/code&gt; on the left and right side. The displayed element must be a view which &lt;em&gt;&amp;ldquo;can be a DOM element, a jQuery object, or a model object for which a view provider has been registered in the &lt;a href=&#34;https://atom.io/docs/api/v1.0.2/ViewRegistry&#34;&gt;view registry&lt;/a&gt;&amp;ldquo;&lt;/em&gt;&lt;br /&gt;
We&amp;rsquo;re going the simple route and create a DOM element&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;class StatusBarClockView extends HTMLElement
  init: -&amp;gt;
    @classList.add(&#39;status-bar-clock&#39;, &#39;inline-block&#39;)
    @activate()

  activate: -&amp;gt;
    @intervalId = setInterval @updateClock.bind(@), 100

  deactivate: -&amp;gt;
    clearInterval @intervalId

  getTime: -&amp;gt;
    date = new Date

    seconds = date.getSeconds()
    minutes = date.getMinutes()
    hour = date.getHours()

    minutes = &#39;0&#39; + minutes if minutes &amp;lt; 10
    seconds = &#39;0&#39; + seconds if seconds &amp;lt; 10

    &amp;quot;#{hour}:#{minutes}:#{seconds}&amp;quot;

  updateClock: -&amp;gt;
    @textContent = @getTime()

module.exports = document.registerElement &#39;status-bar-clock&#39;,
  prototype: StatusBarClockView.prototype, extends: &#39;div&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and display it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;{CompositeDisposable} = require &#39;atom&#39;
StatusBarClockView = require &#39;./status-bar-clock-view&#39;

module.exports = StatusBarClock =
  active: false

  activate: (state) -&amp;gt;
    console.log &#39;Clock was activated&#39;

    @subscriptions = new CompositeDisposable
    # Register command that toggles this view
    @subscriptions.add atom.commands.add &#39;atom-workspace&#39;,     &#39;status-bar-clock:toggle&#39;: =&amp;gt; @toggle()

    @statusBarClockView = new StatusBarClockView()
    @statusBarClockView.init()

  deactivate: -&amp;gt;
    console.log &#39;Clock was deactivated&#39;
    @subscriptions.dispose()
    @statusBarClockView.destroy()
    @statusBarTile?.destroy()

  toggle: -&amp;gt;
    if @active
      @statusBarTile.destroy()
      @statusBarClockView.deactivate()
    else
      console.log &#39;Clock was toggled on&#39;
      @statusBarClockView.activate()
      @statusBarTile = @statusBar.addRightTile
        item: @statusBarClockView, priority: -1

    @active = ! !!@active

  consumeStatusBar: (statusBar) -&amp;gt;
    @statusBar = statusBar
    # auto activate as soon as status bar activates
    @toggle()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last we add a submenu inside the &lt;code&gt;Package&lt;/code&gt; menu that executes the toggle command.&lt;br /&gt;
Create a &lt;code&gt;menus/status-bar-clock.cson&lt;/code&gt; and add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;
# See https://atom.io/docs/latest/hacking-atom-package-word-count#menus for more details
&#39;menu&#39;: [
  {
    &#39;label&#39;: &#39;Packages&#39;
    &#39;submenu&#39;: [
      &#39;label&#39;: &#39;Clock&#39;
      &#39;submenu&#39;: [
        {
          &#39;label&#39;: &#39;Toggle&#39;
          &#39;command&#39;: &#39;status-bar-clock:toggle&#39;
        }
      ]
    ]
  }
]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reload. The clock should be there at the bottom right, updating itself.&lt;br /&gt;
You can find the source code on &lt;a href=&#34;https://github.com/wstucco/status-bar-&#34;&gt;GitHub&lt;/a&gt; and the final package on &lt;a href=&#34;https://atom.io/packages/status-bar-clock&#34;&gt;atom.io&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The importance of freedom according to Erlich Bachman</title>
      <link>http://massimoronca.it/2015/06/24/the-importance-of-freedom-according-to-erlich-bachman.html</link>
      <pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2015/06/24/the-importance-of-freedom-according-to-erlich-bachman.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://massimoronca.it/assets/images/freedom_china.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meteor and Kendo UI integration guide</title>
      <link>http://massimoronca.it/2015/06/05/meteor-and-kendo-ui-integration-guide.html</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2015/06/05/meteor-and-kendo-ui-integration-guide.html</guid>
      <description>&lt;p&gt;At the end of last year I&amp;rsquo;ve been involved in a testdrive project aimed to explore the possibility of replacing good old desktop applications with modern web applications, a demanding task, but nonetheless a fun one.&lt;/p&gt;

&lt;p&gt;The client gave me complete freedom to chose whatever technology I wanted, except for some key elements, one of them was &lt;a href=&#34;http://www.telerik.com/kendo-ui&#34; title=&#34;Kendo UI&#34;&gt;Kendo UI&lt;/a&gt;, a widget library they had been testing for a while with an impressive &lt;a href=&#34;http://www.telerik.com/kendo-ui#more-widgets&#34; title=&#34;Kend UI widgets&#34;&gt;list of features and components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On my side I&amp;rsquo;ve decided to put &lt;a href=&#34;http://meteor.com&#34; title=&#34;Meteor&#34;&gt;Meteor&lt;/a&gt; on test, I confess, I&amp;rsquo;m not the biggest Javascript fan around, but I&amp;rsquo;ve rarely felt so confident with a new platform like I&amp;rsquo;ve been with Meteor, so I went for it.&lt;br /&gt;
The biggest advantage Meteor gave us was speed, we&amp;rsquo;ve been able to put together an incredible (IMHO) amount of work in a very short period of time.&lt;/p&gt;

&lt;p&gt;Long story short: the project was a success, everything was good, we also had the opportunity to experiment on the infrastructure side, and I&amp;rsquo;ve learned a lot in those few months, about things I could never have accessed otherwise.&lt;/p&gt;

&lt;p&gt;There was only one small glitch that constantly bugged me: the integration between Meteor and Kendo, especially in regards to reactivity.&lt;/p&gt;

&lt;p&gt;Meteor might not be the &lt;em&gt;new kid on the block&lt;/em&gt; anymore, but it&amp;rsquo;s not the &lt;a href=&#34;http://en.wikipedia.org/wiki/Spring_Framework&#34; title=&#34;Spring MVC&#34;&gt;well established framework&lt;/a&gt; either: there was no official Telerik package for Meteor, and I had to roll my own, learning by doing.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know wheter Telerik listened to my prayers or not, but on february of this year they released a bunch of &lt;a href=&#34;https://atmospherejs.com/telerik&#34;&gt;packages on Atmoshpere&lt;/a&gt;, making things easier for everyone, including me, so I decided to write this simple guide.&lt;/p&gt;

&lt;p&gt;The Telerik packages differ from each other only in the default theme used, the set of bundled components is the same, you can find the complete list on &lt;a href=&#34;https://github.com/telerik/kendo-ui-core&#34; title=&#34;Kendo UI Core&#34;&gt;their github project page&lt;/a&gt;, although they included only the open source version of the components, this guide applies to the paid version as well.&lt;/p&gt;

&lt;p&gt;We are going to build a simple applications that shows a list of tweets for a particular location (in this example the city of Milan).&lt;br /&gt;
Let&amp;rsquo;s start by creating a new empty application and configure the packages&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ meteor create telerik-demo
$ cd telerik-demo

# disable autopublish, we don&#39;t want to publish all the tweets, but only the
# 30 most recent
# disable insecure too, but it&#39;s not required
$ meteor remove autopublish insecure

# add official momentjs
$ meteor add momentjs:moment
# add twitter library
$ meteor add mrt:twit  
# add telerik components 
# choose your favourite theme
# if you install the bootstrap theme, bootstrap CSS framework is included too
$ meteor add telerik:kendo-ui-core-material-theme

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open &lt;code&gt;telerik-dom.js&lt;/code&gt;, the core application code, and add the declaration of our collection of tweets, making it available to both client and server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Tweets = new Mongo.Collection(&#39;tweets&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then, look for the line &lt;code&gt;if (Meteor.isServer) {&lt;/code&gt;, this is the entry point of the server side app.&lt;br /&gt;
What we need to do is setup the Twitter library, subscribe on a stream filtering by location and language, and then add every tweet we receive to a collection in our MongoDB instance.&lt;br /&gt;
You might be tempted to do something like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Meteor.startup(function () {
  var t = new TwitMaker({
    consumer_key:     &#39;...&#39;
    , consumer_secret:    &#39;...&#39;
    , access_token:     &#39;...&#39;
    , access_token_secret:  &#39;...&#39;
  })

  // I used this tool to get the bounding box coordinates
  // http://boundingbox.klokantech.com/
  var milan = [&#39;8.9936308861&#39;,&#39;45.3026233328&#39;,&#39;9.5197601318&#39;,&#39;45.6359571671&#39;]
  // subscribe to tweets from Milan in Italian
  var stream = t.stream(&#39;statuses/filter&#39;, {locations: milan, language: &#39;it&#39;})

  // listen and wait
  stream.on(&#39;tweet&#39;, function (tweet) {
    Tweets.insert(tweet);
  );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aaaand you would be wrong…&lt;br /&gt;
If you do this, Meteor will exit with the error &lt;code&gt;Meteor code must always run within a Fiber&lt;/code&gt;.&lt;br /&gt;
The problem is that the code that inserts the new tweets is executed asynchronously, outside the Meteor Fiber, so you need to provide Meteor the right environment in which to run. The esiest way is to wrap the callback inside a &lt;code&gt;Meteor.bindEnvironment&lt;/code&gt; call, like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  stream.on(&#39;tweet&#39;, Meteor.bindEnvironment(function (tweet) {
    Tweets.insert(tweet);
  }, function () {
    console.log(&#39;Failed to bind environment&#39;);
  }));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to publish your tweets, to be correct, the 30 most recent tweets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Meteor.publish(&#39;latest_tweets&#39;, function() {
  return Tweets.find({}, {sort: {timestamp_ms: -1}, limit: 30});
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have a working Twitter scraper, let&amp;rsquo;s work on the frontend:
open &lt;code&gt;telerik-demo.html&lt;/code&gt; and replace its content with this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;twitter&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  {{ &amp;gt; tweets }}
&amp;lt;/body&amp;gt;


&amp;lt;template name=&amp;quot;tweets&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;tweets&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;pager&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;script type=&amp;quot;text/x-kendo-tmpl&amp;quot; id=&amp;quot;tweet&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;tweet&amp;quot; data-twitter-id=&amp;quot;${id}&amp;quot;&amp;gt;
      &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;div class=&amp;quot;user&amp;quot;&amp;gt;
            &amp;lt;a href=&amp;quot;http://twitter.com/${user.screen_name}&amp;quot; aria-label=&amp;quot;${user.name} (screen name: ${user.screen_name})&amp;quot; data-scribe=&amp;quot;element:user_link&amp;quot;&amp;gt;
              &amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;${user.profile_image_url}&amp;quot; data-scribe=&amp;quot;element:avatar&amp;quot;&amp;gt;
              &amp;lt;span&amp;gt;
                &amp;lt;span data-scribe=&amp;quot;element:name&amp;quot;&amp;gt;${user.name}&amp;lt;/span&amp;gt;
              &amp;lt;/span&amp;gt;
              &amp;lt;span data-scribe=&amp;quot;element:screen_name&amp;quot;&amp;gt;@${user.screen_name}&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;p class=&amp;quot;tweet&amp;quot;&amp;gt;${text}&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;timePosted&amp;quot;&amp;gt;Posted &amp;lt;a title=&amp;quot;#= moment(created_at).format(&#39;dddd, MMMM Do YYYY, h:mm:ss a&#39;) #&amp;quot;&amp;gt;#= moment(created_at).fromNow() #&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;interact&amp;quot;&amp;gt;${place.full_name}&amp;lt;/p&amp;gt;
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/script&amp;gt;


&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code inside the &lt;code&gt;&amp;lt;script type=&amp;quot;text/x-kendo-tmpl&amp;quot;&amp;gt;&lt;/code&gt; is the template code that the Kendo ListView is going to use to render every single item in the list.&lt;br /&gt;
An explanation of the custom syntax used in Kendo templates is beyond the purpose of this guide, but you can refer to the &lt;a href=&#34;http://docs.telerik.com/kendo-ui/framework/templates/overview&#34;&gt;Telerik official documentation&lt;/a&gt;, it&amp;rsquo;s really easy.&lt;/p&gt;

&lt;p&gt;Now back to &lt;code&gt;telerik-demo.js&lt;/code&gt;, inside &lt;code&gt;if (Meteor.isClient) { ... }&lt;/code&gt; we subscribe to the publications created above&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  Meteor.subscribe(&#39;latest_tweets&#39;, function() {
    console.log(&amp;quot;subscribed to latest tweets&amp;quot;);
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now taht the channel is open, the server will start to send the data to the client and keep it in sync, automatically.&lt;br /&gt;
The last step is to bootstrap the Kendo component and display our tweets on the page&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// when the tweets template has done rendering
Template.tweets.rendered = function() {

  // create the datasource for the listview showing 3 items per page
  var dataSource = new kendo.data.DataSource({
    pageSize: 3
  });

  // initialize the listview with the datasource and the template code
  $(&#39;#tweets&#39;).kendoListView({
    dataSource: dataSource,
    template: kendo.template($(&amp;quot;#tweet&amp;quot;).html())
  });

  // initialize the pager component
  $(&#39;#pager&#39;).kendoPager({
    dataSource: dataSource
  });

  // this function is run automatically when dependencies change,
  // in our case when the collection is updated 
  // (items are changed, added or removed)
  // Meteor figured out that if we subscribed to a publication, we wanna
  // be also informed when it changes
  this.autorun(function() {
    // we use fetch becase it returns a Json list of all the items 
    // in the collection, which is one of the formats supported by
    // Kendo datasource 
    // this also triggers the rendering of the list view and the pager
    dataSource.data(Tweets.find({}, {sort: {timestamp_ms: -1}}).fetch()); 
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that could be all. If now you launch &lt;code&gt;meteor&lt;/code&gt; inside the project folder and navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt; you should see a list of tweets automatically updating.&lt;br /&gt;
It&amp;rsquo;s not the best looking app ever, but it works.&lt;br /&gt;
&lt;img src=&#34;http://i.imgur.com/lXxC3Gg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do something to improve the presentation layer.&lt;br /&gt;
I&amp;rsquo;m not a great designer, so I grabbed this &lt;a href=&#34;http://codepen.io/nerijusgood/pen/Ggqygo&#34; title=&#34;Twitter custom widget CSS&#34;&gt;Twitter widget customization&lt;/a&gt; from Codepen and copied the relevant bits inside &lt;code&gt;telerik-demo.css&lt;/code&gt;.&lt;br /&gt;
Next thing I wanted to try is to add a fade-in effect to every new tweets, to make things smoother.&lt;br /&gt;
I&amp;rsquo;ve created a class that runs an animation inside the CSS and I wanted to attach this class to every new tweet &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@keyframes fade-in {
  from { opacity: 0; }
  to   { opacity: 1; }
}

.fade-in {
  animation-duration: 1s;
  animation-name: fade-in;
}

/* I removed the prefixed versions of keyframes and animation-* for clarity */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My first naive approach relied on &lt;a href=&#34;http://updates.html5rocks.com/2012/02/Detect-DOM-changes-with-Mutation-Observers&#34; title=&#34;Mutation Observers&#34;&gt;Mutation Observers&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  document.addEventListener(&amp;quot;DOMNodeInserted&amp;quot;, function(event) {
    if($(event.target).hasClass(&amp;quot;tweet&amp;quot;)) {
      // a new tweet has been added to the DOM, start fading
      event.target.classList.add(&#39;fade-in&#39;);
      console.warn(&amp;quot;Another node has been inserted! &amp;quot;, event, event.target);
    }
  }, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only after a few unsuccesfull attempts, where every tweet was being faded, I realized that when you change the &lt;code&gt;data&lt;/code&gt; property of the &lt;code&gt;datasource&lt;/code&gt; component, the current view (so only the current page) is re-rendered completely, making every tweet a &lt;em&gt;new&lt;/em&gt; tweet to the eyes of the poor browser.&lt;br /&gt;
The solution is simple, I made a diff between the actual data and the new data coming from the server and only added the fade to those tweets that really were new, I used the Twitter &lt;code&gt;id&lt;/code&gt;   attribute as the key.&lt;/p&gt;

&lt;p&gt;update the template with the new Twitter id attribute&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- telerik-demo.html --&amp;gt;
&amp;lt;script type=&amp;quot;text/x-kendo-tmpl&amp;quot; id=&amp;quot;tweet&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;tweet&amp;quot; data-twitter-id=&amp;quot;${id}&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;update the autorun function to compute a diff and apply the fade-in effect
only to the new tweets&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.autorun(function() {
  var current_values = dataSource.data();
  var updated_values = Tweets.find({}, {sort: {timestamp_ms: -1}}).fetch();
  var current_ids = _.map(current_values, function(x) { return x.id; });
  var updated_ids = _.map(updated_values, function(x) { return x.id; });
  var diff = _.difference(updated_ids, current_ids);

  // update dataSource and trigger listview render
  dataSource.data(updated_values);
  // fade in new nodes
  _.each(diff, function(x) {
    $(&#39;div[data-twitter-id=&amp;quot;&#39;  + x + &#39;&amp;quot;&#39;).addClass(&#39;fade-in&#39;);
  })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;not strictly required, but advised, remove the fade class when animation ends&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var animationListener = function(event){
  if (event.animationName == &amp;quot;fade-in&amp;quot;) {
    console.log(&amp;quot;remove class fade-in from&amp;quot;, event.target);
    event.target.classList.remove(&#39;fade-in&#39;);
  }
}
document.addEventListener(&amp;quot;animationend&amp;quot;, animationListener, false); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;much better now
&lt;img src=&#34;http://i.imgur.com/gr9F232.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the application in action &lt;a href=&#34;http://telerik.meteor.com&#34;&gt;here&lt;/a&gt; and find the source code on &lt;a href=&#34;https://github.com/mikamai/telerik-meteor-integration-demo&#34;&gt;Mikamai&amp;rsquo;s Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About cookies</title>
      <link>http://massimoronca.it/pages/policy.html</link>
      <pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/pages/policy.html</guid>
      <description>&lt;p&gt;&lt;h3&gt;What are cookies in computers?&lt;/h3&gt;
    &lt;p&gt;Also known as browser cookies or tracking cookies, cookies are small, often encrypted text files, located in browser directories. They are used by web developers to help users navigate their websites efficiently and perform certain functions. Due to their core role of enhancing/enabling usability or site processes,&amp;nbsp;disabling cookies&amp;nbsp;may prevent users from using certain websites.&lt;/p&gt;
    &lt;p&gt;Cookies are created when a user&amp;rsquo;s&amp;nbsp;browser&amp;nbsp;loads a particular website. The website sends information to the browser which then creates a text file. Every time the user goes back to the same website, the browser retrieves and sends this file to the website&amp;rsquo;s server. Computer Cookies are created not just by the website the user is browsing but also by other websites that run ads, widgets, or other elements on the page being loaded. These cookies regulate how the ads appear or how the widgets and other elements function on the page.For Managing cookies for different browsers&amp;nbsp;see here&lt;/p&gt;
    &lt;h3&gt;Standard uses for browser cookies&lt;/h3&gt;
    &lt;p&gt;Website servers set cookies to help authenticate the user if the user logs in to a secure area of the website. Login information is stored in a cookie so the user can enter and leave the website without having to re-enter the same authentication information over and over.More information&lt;/p&gt;
    &lt;p&gt;Session Cookies&amp;nbsp;are also used by the server to store information about user page activities so users can easily pick up where they left off on the server&amp;rsquo;s pages. By default, web pages really don&amp;rsquo;t have any &amp;lsquo;memory&amp;rsquo;. Cookies tell the server what pages to show the user so the user doesn&amp;rsquo;t have to remember or start navigating the site all over again. Cookies act as a sort of “bookmark” within the site. Similarly, cookies can store ordering information needed to make shopping carts work instead of forcing the user to remember all the items the user put in the shopping cart.&lt;/p&gt;
    &lt;p&gt;Persistent or tracking Cookies&amp;nbsp;are also employed to store user preferences. Many websites allow the user to customize how information is presented through site layouts or themes. These changes make the site easier to navigate and/or lets user leave a part of the user&amp;rsquo;s “personality” at the site. For Information on session and persistent and tracking cookies,&amp;nbsp;see here&lt;/p&gt;
    &lt;h3&gt;Cookie security and privacy issues&lt;/h3&gt;
    &lt;p&gt;Cookies are NOT viruses. Cookies use a plain text format. They are not compiled pieces of code so they cannot be executed nor are they self-executing. Accordingly, they cannot make copies of themselves and spread to other networks to execute and replicate again. Since they cannot perform these functions, they fall outside the standard virus definition.&lt;/p&gt;
    &lt;p&gt;Cookies CAN be used for malicious purposes though. Since they store information about a user&amp;rsquo;s browsing preferences and history, both on a specific site and browsing among several sites, cookies can be used to act as a form of spyware. Many&amp;nbsp;anti-spyware&amp;nbsp;products are well aware of this problem and routinely flag cookies as candidates for deletion after standard virus and/or spyware scans.See here for some&amp;nbsp;privacy issues and concerns.&lt;/p&gt;
    &lt;p&gt;The way responsible and ethical web developers deal with privacy issues caused by cookie tracking is by including&amp;nbsp;clear descriptions of how cookies are deployed on their site.&amp;nbsp;If you are a web developer and need advice on implementation of cookies and a privacy policy, we suggest you contact marketing specialists who offer&amp;nbsp;search engine optimisation services. These privacy policies should explain what kind of information is collected and how the information is used. Organizations using the cookies initiative started by IAB Europe include:&amp;nbsp;InviteMedia&amp;nbsp;Networkadvertising.org&amp;nbsp;: andAntor&lt;/p&gt;
    &lt;p&gt;Most browsers have built in privacy settings that provide differing levels of cookie acceptance, expiration time, and disposal after a user has visited a particular site. Backing up your computer&amp;nbsp;can give you the peace of mind that your files are safe.&lt;/p&gt;
    &lt;h3&gt;Other cookie-based threats&lt;/h3&gt;
    &lt;p&gt;Since identity protection is highly valued and is every internet users right , it pays to be aware of what threat cookies can pose.&lt;/p&gt;
    &lt;p&gt;As cookies are transmitted back and forth between a browser and website, if an attacker or unauthorized person gets in between the data transmission, the sensitive cookie information can be intercepted. Although relatively rare, this can happen if the browser is connecting to the server using an unencrypted network like an non-secured WiFi channel.Internet security is only attainable if you regualrly use a anti-virus protection programme.See our&amp;nbsp;&lt;a href=&#34;http://www.allaboutcookies.org/security/index.html&#34;&gt;anti virus protection section&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;Other cookie-based attacks involve exploiting faulty cookie-setting systems on servers. If a website doesn&amp;rsquo;t require browsers to use encrypted channels only, attackers can use this vulnerability to trick browsers into sending sensitive information over insecure channels. The attackers then siphon off the sensitive data for unauthorized access purposes.&lt;/p&gt;
    &lt;p&gt;New Laws for the use of cookies and other technologies that store online user information.&lt;/p&gt;
    &lt;p&gt;On May 26th 2011, new rules governing the use of cookies by websites comes into force in Europe.&lt;/p&gt;
    &lt;p&gt;Rather than the &amp;ldquo;Opt out&amp;rdquo; option for website visitors, websites will need to specifically gain the consent of their visitor and they must &amp;ldquo;Opt In&amp;rdquo; to be able to store cookies on their computer or other devices.This is expected to be difficult to manage and enforcement will more than likely be done subtlely and with encouragement rather than with the threat of fines and penaltys.&lt;/p&gt;
    &lt;p&gt;What does the new law say?&lt;br&gt;The new requirement is essentially that cookies can only be placed&amp;nbsp;&lt;br&gt;on machines where the user or subscriber has given their consent.&amp;nbsp;&lt;br&gt;6 (1) Subject to paragraph (4), a person shall not store or gain&amp;nbsp;&lt;br&gt;access to information stored, in the terminal equipment of a subscriber&amp;nbsp;&lt;br&gt;or user unless the requirements of paragraph (2) are met.&amp;nbsp;&lt;br&gt;(2) The requirements are that the subscriber or user of that terminal&amp;nbsp;&lt;br&gt;equipment&amp;ndash;&amp;nbsp;&lt;br&gt;(a) is provided with clear and comprehensive information about the&amp;nbsp;&lt;br&gt;purposes of the storage of, or access to, that information; and&amp;nbsp;&lt;br&gt;(b) has given his or her consent.&amp;nbsp;&lt;br&gt;(3) Where an electronic communications network is used by the&amp;nbsp;&lt;br&gt;same person to store or access information in the terminal equipment&amp;nbsp;&lt;br&gt;of a subscriber or user on more than one occasion, it is sufficient for the purposes of this regulation that the requirements of paragraph (2)&amp;nbsp;&lt;br&gt;are met in respect of the initial use.&amp;nbsp;&lt;br&gt;“(3A) For the purposes of paragraph (2), consent may be signified by a&amp;nbsp;&lt;br&gt;subscriber who amends or sets controls on the internet browser which&amp;nbsp;&lt;br&gt;the subscriber uses or by using another application or programme to&amp;nbsp;&lt;br&gt;signify consent.&lt;br&gt;(4) Paragraph (1) shall not apply to the technical storage of, or&amp;nbsp;&lt;br&gt;access to, information&amp;ndash;&amp;nbsp;&lt;br&gt;(a) for the sole purpose of carrying out the transmission of a&amp;nbsp;&lt;br&gt;communication over an electronic communications network; or&amp;nbsp;&lt;br&gt;(b) where such storage or access is strictly necessary for the&amp;nbsp;&lt;br&gt;provision of an information society service requested by the subscriber&amp;nbsp;&lt;br&gt;or user.&lt;/p&gt;
    &lt;h3&gt;Key tips for safe and responsible cookie-based Web browsing&lt;/h3&gt;
    &lt;p&gt;Due to their flexibility and the fact that many of the largest and most-visited websites use cookies by default, cookies are almost unavoidable. Disabling cookies will lock a user out of many of the most widely-used sites on the Internet like Youtube, Gmail, Yahoo mail, and others. Even search settings require cookies for language settings. Here are some tips you can use to ensure worry-free cookie-based browsing:&lt;/p&gt;
    &lt;p&gt;Customize your&amp;nbsp;browser&amp;rsquo;s cookie settings&amp;nbsp;to reflect your comfort level with cookie security or use the cookie cleaner included in&amp;nbsp;Abine&amp;rsquo;s free Privacy Suite.&lt;/p&gt;
    &lt;p&gt;If you are very comfortable with cookies and you are the only person using your computer, you may want to set long expiration time frames for storing your personal access information and browsing history.&lt;/p&gt;
    &lt;p&gt;If you share access on your computer, you may want to set your browser to clear private browsing data every time you close your browser. While not as secure as rejecting cookies outright, this option lets you access cookie-based websites while deleting any sensitive information after your browsing session.&lt;/p&gt;
    &lt;p&gt;Install and keep antispyware applications updated&lt;/p&gt;
    &lt;p&gt;Many spyware detection, cleanup applications, and spyware removers include attack site detection. They block your browser from accessing websites designed to exploit browser vulnerabilities or download malicious software.&lt;/p&gt;
    &lt;p&gt;Make sure your browser is updated&lt;/p&gt;
    &lt;p&gt;If you haven&amp;rsquo;t already, set your browser to update automatically. This eliminates security vulnerabilities caused by outdated browsers. Many cookie-based exploits are based on exploiting&amp;nbsp;older browsers&amp;rsquo; security shortcomings.&lt;/p&gt;
    &lt;p&gt;Cookies are everywhere and can&amp;rsquo;t really be avoided if you wish to enjoy the biggest and best websites out there. With a clear understanding of how they operate and how they help your browsing experience, you can take the necessary security measures to ensure that you browse the Net confidently.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bootstap Opal for Meteor</title>
      <link>http://massimoronca.it/2015/02/27/bootstap-opal-for-meteor.html</link>
      <pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2015/02/27/bootstap-opal-for-meteor.html</guid>
      <description>&lt;p&gt;If you wanna use the &lt;a href=&#34;https://atmospherejs.com/massimoronca/opal&#34;&gt;Opal build plugin&lt;/a&gt; for Meteor I&amp;rsquo;ve recently published, but don&amp;rsquo;t know how, here it is &lt;a href=&#34;https://gist.github.com/wstucco/42392ee21b76dfa3ef83&#34;&gt;a Gist showing how to integrate Opal with Meteor builtin functionalities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/wstucco/42392ee21b76dfa3ef83.js?file=user.rb&#34;&gt; &lt;/script&gt;
&lt;script src=&#34;https://gist.github.com/wstucco/42392ee21b76dfa3ef83.js?file=meteor.rb&#34;&gt; &lt;/script&gt;
&lt;script src=&#34;https://gist.github.com/wstucco/42392ee21b76dfa3ef83.js?file=main.rb&#34;&gt; &lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Opal for Meteor</title>
      <link>http://massimoronca.it/2015/02/18/opal-for-meteor.html</link>
      <pubDate>Wed, 18 Feb 2015 00:00:01 +0200</pubDate>
      
      <guid>http://massimoronca.it/2015/02/18/opal-for-meteor.html</guid>
      <description>&lt;p&gt;I present you the result of my weekend project: an &lt;a href=&#34;https://atmospherejs.com/massimoronca/opal&#34;&gt;Opal build plugin&lt;/a&gt; for Meteor that compiles Ruby files down to Javascript, both on the client and the server.&lt;/p&gt;

&lt;p&gt;Installation is as easy as running&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;code&gt;meteor add massimoronca:opal&lt;/code&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;meteor add mikamai:opal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Files anding in &lt;code&gt;.rb&lt;/code&gt; or &lt;code&gt;.js.rb&lt;/code&gt; will be autoatically compiled and loaded.&lt;/p&gt;

&lt;p&gt;For those who don&amp;rsquo;t know what Opal is, I reccomend to visit the &lt;a href=&#34;http://opalrb.org&#34;&gt;Opal website&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brainfuck in Elixir, part three, compiling</title>
      <link>http://massimoronca.it/2015/01/24/brainfuck-in-elixir-part-three-compiling.html</link>
      <pubDate>Sat, 24 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2015/01/24/brainfuck-in-elixir-part-three-compiling.html</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;This is the third in a series of articles on building a brainfuck interpreter in Elixir.&lt;br /&gt;
In the &lt;a href=&#34;http://massimoronca.it/2014/10/15/writing-a-brainfuck-interpreter-in-elixir-part-one.html#content&#34;&gt;first one&lt;/a&gt; we built a minimal brainfuck interpreter that could understand the basic instructions.&lt;br /&gt;
In &lt;a href=&#34;http://massimoronca.it/2014/11/10/writing-a-brainfuck-interpreter-in-elixir-part-two.html#content&#34;&gt;the second&lt;/a&gt;, we completed it by implementing loops.&lt;br /&gt;
In this third episode we&amp;rsquo;ll write a simple compiler to translate Brainfuck instructions to a machine readable intermediate format (AST) and a VM that executes it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post was supposed to be about testing and the command line tools, I changed my mind and I will talk about improving our interpreter and turning it into a compiler.&lt;/p&gt;

&lt;p&gt;Writing a performant compiler is probably one of the most challenging tasks for a programmer, but the theory behind it is actually quite simple.&lt;br /&gt;
Compilers just &lt;em&gt;transform&lt;/em&gt; a source code written in a programming language to some other code, usually a different programming language (including intermediate languages and machine language).&lt;br /&gt;
Most of the time, they are built following a common design, this one&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://twimgs.com/ddj/images/article/2012/0512/latfig1.gif&#34; alt=&#34;Compiler design&#34; /&gt;
&amp;gt; copyright &lt;a href=&#34;http://www.drdobbs.com/architecture-and-design/the-design-of-llvm/240001128&#34;&gt;Dr. Dobb&amp;rsquo;s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our compiler will be much simpler: we will completely skip the optimizer (for now) and will directly execute the output of the fronted (AST or abstract syntax tree, from now on).&lt;/p&gt;

&lt;p&gt;Technically, we are writing the frontend of the compiler, which is the starting point for everything else to come.&lt;/p&gt;

&lt;h4 id=&#34;the-intermediate-language:dd48d43642e3d093e06d51cccfdccdcc&#34;&gt;The intermediate language&lt;/h4&gt;

&lt;p&gt;Brainfuck is already an intermediate language, very similar to assembly. Each symbol is an &lt;code&gt;opcode&lt;/code&gt;: for example &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; can be easily mapped to a relative &lt;code&gt;JMP&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; maps to &lt;code&gt;INC&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; to &lt;code&gt;DEC&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; are &lt;code&gt;JZ&lt;/code&gt; (jump if zero) and &lt;code&gt;JNZ&lt;/code&gt; (jump if not zero).&lt;br /&gt;
&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;,&lt;/code&gt; are more complex, there&amp;rsquo;s no single instruction in assembly for reading and writing chars to the screen, but basically they are the &lt;code&gt;C&lt;/code&gt; equivalent of &lt;code&gt;putchar&lt;/code&gt; and &lt;code&gt;getchar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Everybody loves assembly, but we will not use those &lt;code&gt;opcodes&lt;/code&gt;, we will use something more similar to labels, something mnemonic, because, right now, we just need to know which block to eceute, we have very simple instructions, with no parameters, that do just one thing.&lt;br /&gt;
Things will change when we&amp;rsquo;ll get our hands on the optimizer, but for now we&amp;rsquo;ll keep things simple, and map Brainfuck instructions to &lt;a href=&#34;http://elixir-lang.org/getting_started/2.html#2.3-atoms&#34;&gt;Elixir atoms&lt;/a&gt; (think about them as Ruby&amp;rsquo;s symbols).&lt;/p&gt;

&lt;p&gt;Our instructions set will be the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;+ -&amp;gt; :inc_d
- -&amp;gt; :dec_d
&amp;gt; -&amp;gt; :inc_p
&amp;lt; -&amp;gt; :dec_p
. -&amp;gt; :put_c
, -&amp;gt; :get_c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loops are mapped to &lt;a href=&#34;http://elixir-lang.org/getting_started/7.html#7.1-keyword-lists&#34;&gt;Elixir keywords&lt;/a&gt;, we already ignore the end loop instruction &lt;code&gt;]&lt;/code&gt;, because we unconditionally jump back to &lt;code&gt;[&lt;/code&gt; when we find one.&lt;br /&gt;
That leaves &lt;code&gt;[&lt;/code&gt; as the only complex instruction in the set, the only that carries a parameter (the body of the loop).&lt;br /&gt;
So loops are defined as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;[ -&amp;gt; {:loop, [loop body]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or in the condensed form&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ -&amp;gt; [loop: [loop body]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loop body is always a list of instructions.&lt;/p&gt;

&lt;h4 id=&#34;the-compiler-implementation:dd48d43642e3d093e06d51cccfdccdcc&#34;&gt;The compiler implementation&lt;/h4&gt;

&lt;p&gt;To write the interpreter, we already wrote a Brainfuck scanner, tokenizer and parser. We&amp;rsquo;ll take advantage of it to emit our &lt;code&gt;AST&lt;/code&gt;, turns out it can be written in a very compact way&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule Brainfuck.Compiler do

  def compile(program) when is_binary(program) do
    compile(program |&amp;gt; to_char_list)
  end

  def compile(program) do 
    compile(program, [], [])  
  end
  
  defp compile([], _, stack) when length(stack) &amp;gt; 0 do 
    raise &amp;quot;unmatched &#39;[&#39;&amp;quot;  
  end
  
  defp compile([], ast, stack) when length(stack) == 0 do 
    ast  
  end

  defp compile([ic | tail], ast, stack) do
    case {[ic], stack} do
      { &#39;+&#39;, _ } -&amp;gt; compile tail, ast ++ [:inc_d], stack
      { &#39;-&#39;, _ } -&amp;gt; compile tail, ast ++ [:dec_d], stack
      { &#39;&amp;gt;&#39;, _ } -&amp;gt; compile tail, ast ++ [:inc_p], stack
      { &#39;&amp;lt;&#39;, _ } -&amp;gt; compile tail, ast ++ [:dec_p], stack
      { &#39;.&#39;, _ } -&amp;gt; compile tail, ast ++ [:put_c], stack
      { &#39;,&#39;, _ } -&amp;gt; compile tail, ast ++ [:get_c], stack
      { &#39;[&#39;, _ } -&amp;gt; compile tail, [], [ast] ++ stack
      { &#39;]&#39;, [] } -&amp;gt; raise &amp;quot;unmatched &#39;]&#39;&amp;quot;
      { &#39;]&#39;, [h | t] } -&amp;gt; compile tail, h ++ [loop: ast], t
      _ -&amp;gt; compile tail, ast, stack
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty short, pretty easy to follow.&lt;br /&gt;
First we create a &lt;code&gt;Brainfuck.Compiler&lt;/code&gt; module, that is our namespace for the compiler, we then put a few conditions: if the input is a string, we convert it to a &lt;a href=&#34;http://elixir-lang.org/getting_started/6.html#6.3-char-lists&#34;&gt;char list&lt;/a&gt; that is easier to traverse, and we declare that when &lt;code&gt;compile&lt;/code&gt; is called with an empty list, there are no more instructions to translate, we are done and return the &lt;code&gt;AST&lt;/code&gt;.&lt;br /&gt;
Unless the stack is not empty, which is an error condition, we&amp;rsquo;ll se why in a moment.&lt;/p&gt;

&lt;p&gt;Every instruction found, is appended to the &lt;code&gt;AST&lt;/code&gt; list, every not recognized symbol, is ignored and discarded.&lt;/p&gt;

&lt;p&gt;What it does is take this input&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-brainfuck&#34;&gt;+-&amp;gt;&amp;lt;[.,]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and translate it to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;[:inc_d, :dec_d, :inc_p, :dec_p, loop: [:put_c, :get_c]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loops are handled recursively: once we find a &lt;code&gt;[&lt;/code&gt;, we save in a &lt;code&gt;stack&lt;/code&gt; the current &lt;code&gt;AST&lt;/code&gt;.&lt;br /&gt;
We use the stack as a FIFO queue, we prepend the &lt;code&gt;AST&lt;/code&gt; to the actual value of the stack, because the loop could be nested, we then execute the body of the loop like it was a standalone program.&lt;br /&gt;
When we find a &lt;code&gt;]&lt;/code&gt;, we pop from the head of the stack and prepend it to the loop &lt;code&gt;AST&lt;/code&gt; and keep popping until we have emptied the stack.&lt;br /&gt;
This way we can track unbalanced pairs of &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;.&lt;br /&gt;
If we pop and the stack is empty, we popped once too often.&lt;br /&gt;
If we get to the end, where no instruction is left to be picked up, and the stack is not empty, we haven&amp;rsquo;t popped enough.&lt;/p&gt;

&lt;h3 id=&#34;the-virtual-machine:dd48d43642e3d093e06d51cccfdccdcc&#34;&gt;The Virtual Machine&lt;/h3&gt;

&lt;p&gt;Our virtual machine is not really a virtual machine, in the strict sense of the term, it is more a runtime that knows our bytecode and how to execute it.&lt;br /&gt;
It is really not much different from the interpreter, it reads a list of inputs and decide what to do with them.&lt;br /&gt;
But, it has some advantages.&lt;br /&gt;
The first one is that the compiler ensures correctness of our code: we can&amp;rsquo;t be sure that the code does what it is supposed to do or that there won&amp;rsquo;t be an nfinite loop, but we can assume it is formally correct (no unbalanced loops, for example).&lt;br /&gt;
The second one is that having a bytecode, enable us to optimize the code.&lt;br /&gt;
The simpler optimization is that we don&amp;rsquo;t have to scan the code back and forth to find the boundaries of the loops, they are already expressed in the &lt;code&gt;AST&lt;/code&gt;.&lt;br /&gt;
Infact to &lt;code&gt;run&lt;/code&gt; loops the VM we just executes them&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(program = [{:loop, loop} | tail], addr, mem, input, output) do
  case mem |&amp;gt; byte_at addr do
    0 -&amp;gt;
      run(tail, addr, mem, input, output)
    _ -&amp;gt;
      {a, m, i, o} = run(loop, addr, mem, input, output)
      run(program, a, m, i, o)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;keywords&lt;/code&gt; in Elixir are matched with &lt;code&gt;{:key, value}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This optimization alone makes our programs run up to six times faster.&lt;br /&gt;
Conclusions are based on higly non-scientifical benchmarks&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ time ./brainfuck test/fixtures/bench_ok.bf
  OK
  
  real  1m10.399s
  user  1m9.483s
  sys 0m0.391s

$ time ./brainfuck -i test/fixtures/bench_ok.bf
  OK
  
  real  6m2.453s
  user  5m57.601s
  sys 0m1.704s 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The more loops there are in the Brainfuck code, the more it should benefit from the compilation.&lt;/p&gt;

&lt;p&gt;You can find all the code &lt;a href=&#34;https://github.com/wstucco/elixir-brainfuck/&#34;&gt;on github&lt;/a&gt;, to create the brainfuck executable run &lt;code&gt;mix escript.build&lt;/code&gt;, if you run it with the &lt;code&gt;-i&lt;/code&gt; flag, it will use the interpreter written in the previous two articles, otherwise it will use the compiler.&lt;br /&gt;
To run the tests use &lt;code&gt;mix test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And if you find the reason why the interpreter gets stuck in an infinite loop running &lt;a href=&#34;https://github.com/wstucco/elixir-brainfuck/blob/master/test/fixtures/bench.bf&#34;&gt;this brainfuck program&lt;/a&gt;, please, &lt;a href=&#34;mailto:massimo@mikamai.com&#34;&gt;let me know&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing a Brainfuck interpreter in Elixir, part two</title>
      <link>http://massimoronca.it/2014/11/10/writing-a-brainfuck-interpreter-in-elixir-part-two.html</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2014/11/10/writing-a-brainfuck-interpreter-in-elixir-part-two.html</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;This is the second in a series of articles on building a brainfuck interpreter in Elixir&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the &lt;a href=&#34;http://massimoronca.it/2014/10/15/writing-a-brainfuck-interpreter-in-elixir-part-one.html#content&#34;&gt;first part&lt;/a&gt; we built a minimal brainfuck interpreter that can already run some basic program.
For example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-brainfuck&#34;&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.
# prints A

,-.
# prints the ASCII character preceding the one taken as input
# in &amp;quot;B&amp;quot; -&amp;gt; out &amp;quot;A&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But honestly we can&amp;rsquo;t do anything more with it.&lt;br /&gt;
The first missing feature is &lt;em&gt;memory management&lt;/em&gt;. We have implemented the functions that move the pointer to memory cells left and right, but we&amp;rsquo;re still stuck with a non expanding memory tape of one cell only.&lt;br /&gt;
Let&amp;rsquo;s implement memory auto expansion, turns out it is gonna be very easy.&lt;/p&gt;

&lt;h3 id=&#34;memory-management:b2ed223dec99eecb4254f6d99c79a103&#34;&gt;Memory management&lt;/h3&gt;

&lt;p&gt;The functions that handle the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; operators are&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(@op_pinc &amp;lt;&amp;gt; rest, addr, mem, output) do
  run(rest, addr+1, mem, output)
end

defp run(@op_pdec &amp;lt;&amp;gt; rest, addr, mem, output) do
  run(rest, addr-1, mem, output)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One easy way to try to implement an auto expanding memory would be to check if we are accessing a cell past the end of the tape or before the initial one and handling those edge cases.
Something like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(@op_pinc &amp;lt;&amp;gt; rest, addr, mem, output) do
  if length(mem) == addr+1 do
    mem = mem ++ [0]
  end
  run(rest, addr+1, mem, output)
end

defp run(@op_pdec &amp;lt;&amp;gt; rest, addr, mem, output) do
  if addr == 0 do
    mem = [0] ++ mem
  end
  run(rest, addr-1, mem, output)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This implementation has several problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the second function does not work, it keeps decrementing the memory pointer and can go negative, which is an unwanted behaviour (it should be &lt;code&gt;zero&lt;/code&gt;). We should add another &lt;code&gt;if&lt;/code&gt; to make it work, not so good.&lt;/li&gt;
&lt;li&gt;We are shadowing the original &lt;code&gt;mem&lt;/code&gt; variable by reassigning its value.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;we are modifying code that already works (we&amp;rsquo;ll talk about testing Elixir code in the next article) introducing branching and making it harder to mantain&lt;/li&gt;
&lt;li&gt;we&amp;rsquo;re not &lt;em&gt;taking advantage of Elixir features&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the main selling point of Elixir is pattern matching in function declaration.&lt;br /&gt;
But pattern matching alone could not be enough, as we&amp;rsquo;ve seen in this example.&lt;br /&gt;
In Elixir you can add conditions to function declarations that act in tandem with pattern matching and limit the range of values a function accept. They are called &lt;code&gt;guard clauses&lt;/code&gt;, I&amp;rsquo;ll rewrite those two functions to use them:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;note the &lt;code&gt;when&lt;/code&gt; after function declaration&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# we are moving past the end of the memory tape
defp run(@op_pinc &amp;lt;&amp;gt; rest, addr, mem, output) when length(mem) == addr + 1 do
  # append a new cell, initialize its value to zero, return the next address
  run(rest, addr+1, mem ++ [0], output)
end

# we are moving to the left of the first cell of the memory tape
defp run(@op_pdec &amp;lt;&amp;gt; rest, addr, mem, output) when addr == 0 do
  # prepend a new empty cell, initialize its value to zero, return zero as address
  run(rest, 0, [0] ++ mem, output)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is much better,  requires no branching, can be added without modifying the existing code and by looking at the definition we can easily guess when the function is going to be called.&lt;br /&gt;
The only limitation is that Erlang VM only allows &lt;a href=&#34;http://elixir-lang.org/getting_started/5.html#5.2-expressions-in-guard-clauses.&#34;&gt;a limited set of expressions in guards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this simple addition, we have created a complete memory management system, that can automatically expand on both sides, in a virtually unlimited way.&lt;/p&gt;

&lt;h3 id=&#34;loops-and-jumps:b2ed223dec99eecb4254f6d99c79a103&#34;&gt;Loops and jumps&lt;/h3&gt;

&lt;p&gt;Implementing brainfuck operators has been quite linear until now.
We just had to follow the language specs and we obtained a working implementation.&lt;/p&gt;

&lt;p&gt;Loops are a bit harder task though.&lt;br /&gt;
The following are the representations of the two ways to define loops&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;while&lt;/code&gt; loop
&lt;img src=&#34;http://i.imgur.com/IiIEPo8.jpg&#34; alt=&#34;flow chart of while loop&#34; /&gt;&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;do until&lt;/code&gt; loop
&lt;img src=&#34;http://i.imgur.com/Joke2ar.jpg&#34; alt=&#34;do until loop&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In Elixir specs they are defined as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[&lt;/code&gt; if the current cell value is zero, jump to the next matching &lt;code&gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;]&lt;/code&gt; if the current cell value is non-zero jump back to the matching &lt;code&gt;[&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looks like brainfuck author overengineered the loops, making it possible to have both.
But when it&amp;rsquo;s time to implement them, we can choose to check the loop condition only one time (at the beginning or at the end) and treat the other end of the loop as an &lt;em&gt;unconditional&lt;/em&gt; jump.
I&amp;rsquo;ve chosen to implement the &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;

&lt;p&gt;To implement the loop in brainfuck, we need a function that matches &lt;em&gt;balanced couples&lt;/em&gt; of &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; first (did someone say s-expressions?).&lt;br /&gt;
We cannot simply match &lt;code&gt;]&lt;/code&gt; when we find a &lt;code&gt;[&lt;/code&gt; and the reason is fairly obvious: we could not have nested loops (&lt;code&gt;[[-]-]&lt;/code&gt; would not work).&lt;/p&gt;

&lt;p&gt;The algorithm we are using is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;when we match a &lt;code&gt;[&lt;/code&gt; we check the value at the current memory address, if it is zero, we jump past the end of the loop&lt;/li&gt;
&lt;li&gt;if it is not zero, we extract the loop&amp;rsquo;s body and execute it, like it is a stand alone program, then collect the results and jump (&lt;em&gt;unconditionally&lt;/em&gt;) to the beginning of the loop&lt;/li&gt;
&lt;li&gt;go back to 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In code it is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(@op_lbeg &amp;lt;&amp;gt; rest, addr, mem, output) do
  case mem |&amp;gt; byte_at addr do
    0 -&amp;gt;
      run(rest |&amp;gt; jump_to_lend, addr,  mem, output)
    _ -&amp;gt;
      {a, m, o} = run(rest |&amp;gt; loop_body, addr,  mem, output)
      # prepend [ to the input, to make sure we call this function again
      run(@op_lbeg &amp;lt;&amp;gt; rest, a, m, o)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;remember that in Elixir &lt;code&gt;_&lt;/code&gt; means &lt;em&gt;match everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To match the balanced couples of square brackets, I used this algorithm&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;when a &lt;code&gt;[&lt;/code&gt; is found, pass the rest to a matcher function with a &lt;code&gt;depth&lt;/code&gt; parameter with value &lt;code&gt;1&lt;/code&gt; and a parameter &lt;code&gt;acc&lt;/code&gt;, to hold the length of the loop body, initially set to &lt;code&gt;zero&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;for every character we find, we increment &lt;code&gt;acc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if we find a &lt;code&gt;[&lt;/code&gt;, increment &lt;code&gt;depth&lt;/code&gt; too&lt;/li&gt;
&lt;li&gt;if we find a &lt;code&gt;]&lt;/code&gt; decrement &lt;code&gt;depth&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;depth&lt;/code&gt; is zero, we have found the end of loop, return the length of its body&lt;/li&gt;
&lt;li&gt;if we reach the end of the input and &lt;code&gt;depth&lt;/code&gt; is non-zero, square brackets are unbalanced, &lt;code&gt;raise&lt;/code&gt; an error then.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s translate this to Elixir&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;
# start the matching loop
defp match_lend(source), do: match_lend(source, 1, 0)

# if depth is zero, we have reached the other end of the loop
# return the body length
defp match_lend(_, 0, acc), do: acc

# if we reached the end of the input, but depth is not zero, the
# sequence is unbalanced, raise an error
defp match_lend(@empty, _, _), do: raise &amp;quot;unbalanced loop&amp;quot;

# [ increment the depth
defp match_lend(@op_lbeg &amp;lt;&amp;gt; rest, depth, acc), do: match_lend(rest, depth+1, acc+1)
# ] decrement the depth
defp match_lend(@op_lend &amp;lt;&amp;gt; rest, depth, acc), do: match_lend(rest, depth-1, acc+1)
# every other character just increment acc (loop body length)
defp match_lend(&amp;lt;&amp;lt;_&amp;gt;&amp;gt; &amp;lt;&amp;gt; rest, depth, acc), do: match_lend(rest, depth, acc+1)

# returns the slice of the input program starting from the end of the loop after ]
defp jump_to_lend(source), do: source |&amp;gt; String.slice (source |&amp;gt; match_lend)..-1
# return the slice of the input that represent the loop&#39;s body 
# between 0 and the body length-1 (everything but the last ])
defp loop_body(source), do: source |&amp;gt; String.slice 0..(source |&amp;gt; match_lend)-1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This implementation automatically works for nested loops of any depth.
Every time a &lt;code&gt;[&lt;/code&gt; command is found,  the program is split in a smaller one and executed until the loop condition is met (this does not save you from infinite loops).&lt;/p&gt;

&lt;p&gt;We have now a complete implementation of a brainfuck interpreter that can run any brainfuck program.&lt;br /&gt;
To test it let&amp;rsquo;s run it inside &lt;code&gt;iex&lt;/code&gt; the Elixir shell&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/1lTQqee.gif&#34; alt=&#34;iex brainfuck session&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the next post I&amp;rsquo;ll talk about testing the code, creating a project and compiling down to an executable and the command line tools.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/wstucco/3064b6d01f1f8cf1292c&#34;&gt;As usual, I&amp;rsquo;ve created a gist with all the code presented in this post&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Create an animated GIF of your console sessions</title>
      <link>http://massimoronca.it/2014/11/05/create-an-animated-gif-of-your-console-sessions.html</link>
      <pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2014/11/05/create-an-animated-gif-of-your-console-sessions.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://s2.quickmeme.com/img/32/325fc351053e41d230961a71308d37937e68192130d11a82308ae619571ef942.jpg&#34; alt=&#34;animate all the things&#34; /&gt;&lt;/p&gt;

&lt;p&gt;More often than not, our job involves opening up a console, typing some command and waiting for the output.&lt;br /&gt;
When I write articles, sometimes I feel the need to show how the commands behave interactively, not only the sequence of commands you have to type.&lt;br /&gt;
It&amp;rsquo;s easier to understand by looking at an animation, than reading&lt;br /&gt;
&amp;ldquo;when you hit TAB &amp;lt;this happen&amp;gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;For example, can you explain how the emmet plugin for VIM works, better than this, using only words?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/38647/86b91c27-f894-c969-89b0-5846408ad1db.gif&#34; alt=&#34;emmet plugin for VIM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, the solution is pretty easy.&lt;br /&gt;
You need a few open source tools, if you&amp;rsquo;re on a Mac, like me, you should already have installed &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, and Imagemagick (&lt;code&gt;brew install imagemagick&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To record your sessions, you need &lt;code&gt;ttyrec&lt;/code&gt; (&lt;code&gt;brew install ttyrec&lt;/code&gt; on Mac).&lt;br /&gt;
The usage is very simlpe&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;usage: ttyrec [-u] [-e command] [-a] [file]

OPTIONS
       -a     Append the output to file or ttyrecord, rather than overwriting it.

       -u     With this option, ttyrec automatically calls uudecode(1) and  saves  its  output  when  uuencoded  data
              appear on the session.  It allow you to transfer files from remote host.  You can call ttyrec with this
              option, login to the remote host and invoke uuencode(1) on it for the file you want to transfer.

       -e command
              Invoke command when ttyrec starts.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;file&lt;/code&gt; is the name of the file that will be used to record the session. If no file name is given, &lt;code&gt;ttyrecord&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;A new session is started as soon as you launch &lt;code&gt;ttyrec&lt;/code&gt; and is automatically saved when you close the session with &lt;code&gt;CTRL+D&lt;/code&gt; or &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To replay an already saved session, use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ttyplay [-s SPEED] [-n] [-p] file

OPTIONS
       -s SPEED
              multiple the playing speed by SPEED (default is 1).

       -n     no wait mode.  Ignore the timing information in file.

       -p     peek another person&#39;s tty session.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see how it looks&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/q7NHxN0.gif&#34; alt=&#34;ttyrec session&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a recorded sessions, we need to convert it to an animated GIF.&lt;br /&gt;
We&amp;rsquo;ll use &lt;a href=&#34;https://github.com/icholy/ttygif&#34;&gt;&lt;code&gt;ttygif&lt;/code&gt;&lt;/a&gt; for the task.&lt;br /&gt;
There&amp;rsquo;s no installer for it, you must compile it from the sources&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/icholy/ttygif.git
$ cd ttygif
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once make is done, you will find some executable files in the folder&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-rwxr-xr-x   1 maks  staff    881 Nov  5 16:08 concat.sh
-rwxr-xr-x   1 maks  staff    829 Nov  5 16:08 concat_osx.sh
-rwxr-xr-x   1 maks  staff  14836 Nov  5 16:08 ttygif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my setup I&amp;rsquo;ve linked &lt;code&gt;ttygif&lt;/code&gt; to &lt;code&gt;/usr/local/bin&lt;/code&gt;  and &lt;code&gt;concat.sh&lt;/code&gt; (&lt;code&gt;concat_osx.sh&lt;/code&gt; in case you&amp;rsquo;re on a Mac) to &lt;code&gt;/usr/local/bin/ttyconcat&lt;/code&gt; to avoid name clash.&lt;br /&gt;
Creating the gif is a two steps process: first you launch &lt;code&gt;ttygif &amp;lt;recfile&amp;gt;&lt;/code&gt; to genearet a sequence of PNGs, then you launch the &lt;code&gt;ttyconcat&lt;/code&gt; script we linked before and it automatically creates the animated GIF for you.&lt;br /&gt;
Optionally you can pass an output filename to &lt;code&gt;ttyconcat&lt;/code&gt;, if omitted the image will be saved as &lt;code&gt;output.gif&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are a prefectionist, there&amp;rsquo;s an optional final step, install &lt;a href=&#34;http://www.lcdf.org/gifsicle/&#34;&gt;&lt;code&gt;gifsicle&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;brew install gifsicle&lt;/code&gt;) and give your animation the final touches.&lt;br /&gt;
I usually add a fixed delay between frames, make it loop forever and optimize the size with this command line&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gifsicle --delay=10 --loop=0 -O3 &amp;lt; in.gif &amp;gt; out.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More otpions can be found on the &lt;a href=&#34;http://www.lcdf.org/gifsicle/man.html&#34;&gt;&lt;code&gt;gifsicle&lt;/code&gt; man page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing a Brainfuck interpreter in Elixir, part one</title>
      <link>http://massimoronca.it/2014/10/15/writing-a-brainfuck-interpreter-in-elixir-part-one.html</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2014/10/15/writing-a-brainfuck-interpreter-in-elixir-part-one.html</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;For instructions on how to install the Elixir environment you can take a look at the &lt;a href=&#34;http://elixir-lang.org/getting_started/1.html#1.1-installers&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get used to the language and try some of the code in this post, you can start &lt;code&gt;iex&lt;/code&gt;, the Elixir shell.
One of its best features are autocompletion of module and function names and the integrated documentation accessible with the command &lt;code&gt;h&lt;/code&gt;.
This is an example of an &lt;code&gt;iex&lt;/code&gt; session:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/IigY3j3.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;brainfuck-the-language:5e8426109aae4353298eac2be50da78b&#34;&gt;Brainfuck, the language&lt;/h3&gt;

&lt;p&gt;Brainfuck is an esoteric, turing complete, programming language with a very small set of instructions: there are only 8 of them.
.
A typical implementation requires a memory of at least 30 thousand cells, but ideally infinite on both sides (we&amp;rsquo;ll see this is very easy to implement in Elixir), each initially set to zero and a data pointer that points to the first memory cell.
The available commands are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; increment the data pointer (point to the cell on the right)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; decrement the data pointer (point to the cell on the left)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; increment the value at the data pointer location&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; decrement the value at the data pointer location&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; output the value at the data pointer as byte&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt; read a byte into the cell at pointer location&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&lt;/code&gt; if the current cell value is zero, jump to the next matching &lt;code&gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;]&lt;/code&gt; if the current cell value is non-zero jump back to the matching &lt;code&gt;[&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All other characters are considered comments, hence ignored.&lt;/p&gt;

&lt;h3 id=&#34;implementation-details:5e8426109aae4353298eac2be50da78b&#34;&gt;Implementation details&lt;/h3&gt;

&lt;p&gt;We are going to write an Elixir module that only export one public function &lt;code&gt;run&lt;/code&gt; that accept a brainfuck program as string and scan it, character by character, until we reach the end.
As a result it returns a triplet containing the final data pointer address, the memory state and the output generated.
I assumed that each memory cell is an unsigned byte, that overlap on overflow (255+1 becomes zero again).
Input and output operations work on bytes too.&lt;/p&gt;

&lt;p&gt;In Elixir pattern matching is a fundamental feature for controlling the program flow, there are no loop instructions, so we are forced to use recursion.
The condition of our loops are expressed in the function definition.&lt;/p&gt;

&lt;p&gt;The logic of our interpreter is very simple: we are going to consume the program string char by char by using the pattern below
&amp;gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is the operator for string concatenation, it work on bitstring, but since strings in Elixir are binaries, it works on strings too&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;run(first_char &amp;lt;&amp;gt; rest_of_the_program, ... ) do
  ...
  run(rest_of_the_program, ...)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an example, the simple program &lt;code&gt;++.&lt;/code&gt;, which increment the location zero two times, and then output the result will flow like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# step 1
run(&amp;quot;+&amp;quot; &amp;lt;&amp;gt; &amp;quot;+.&amp;quot;, 0, [0], &amp;quot;&amp;quot;)
  # inc the value at zero
  run(&amp;quot;+.&amp;quot;, 0, [0+1], &amp;quot;&amp;quot;)

# step 2
run(&amp;quot;+&amp;quot; &amp;lt;&amp;gt; &amp;quot;.&amp;quot;, 0, [1], &amp;quot;&amp;quot;)
  # inc the value at zero
  run(&amp;quot;.&amp;quot;, 0, [1+1], &amp;quot;&amp;quot;)

# step 3
run(&amp;quot;.&amp;quot; &amp;lt;&amp;gt; &amp;quot;&amp;quot;, 0, [2], &amp;quot;&amp;quot;)
  # append the value at zero to output
  run(&amp;quot;&amp;quot;, 0, [2], &amp;quot;&amp;quot; &amp;lt;&amp;gt; &amp;lt;&amp;lt;2&amp;gt;&amp;gt;)

# final step
run(&amp;quot;&amp;quot;, 0, [2], &amp;lt;&amp;lt;2&amp;gt;&amp;gt;)
  # return {addr, memory, output} -&amp;gt; {0, [2], &amp;lt;&amp;lt;2&amp;gt;&amp;gt;}


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;first-steps:5e8426109aae4353298eac2be50da78b&#34;&gt;First steps&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s begin with the definition of our module, we are going to define our instruction set and the run function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule Brainfuck do

    # opcodes
    @op_vinc &amp;quot;+&amp;quot; # increment value at memory address
    @op_vdec &amp;quot;-&amp;quot; # decrement value at memory address
    @op_pinc &amp;quot;&amp;gt;&amp;quot; # increment memory address
    @op_pdec &amp;quot;&amp;lt;&amp;quot; # decrement memory address
    @op_putc &amp;quot;.&amp;quot; # output byte at memory address
    @op_getc &amp;quot;,&amp;quot; # input byte into memory address
    @op_lbeg &amp;quot;[&amp;quot; # loop begin
    @op_lend &amp;quot;]&amp;quot; # loop end

    def run(program), do: run(program, 0, [0], &amp;quot;&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have noticed that run doesn&amp;rsquo;t really do anything, except call another run function with different parameters.
This is a common pattern in Elixir programs: functions are defined as name/arity (the arity is the number of parameters a function takes), so for example the first &lt;code&gt;run&lt;/code&gt; function is &lt;code&gt;run/1&lt;/code&gt; and the one we are calling is &lt;code&gt;run/4&lt;/code&gt;, for Elixir they are two completely different functions, even if they share the same name.
Elixir have strictly immutable types, we need to carry the state around by passing it in parameters, we&amp;rsquo;ll see in a minute what the parameters are for.&lt;/p&gt;

&lt;h3 id=&#34;with-a-little-help-from-my-friends:5e8426109aae4353298eac2be50da78b&#34;&gt;With a little help from my friends&lt;/h3&gt;

&lt;p&gt;Before getting our hands dirty (they&amp;rsquo;re not gonna be that dirty, I promise) I&amp;rsquo;m going to show you some helper functions I created to keep code as clean as possible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp inc_at(list, addr), do: List.update_at(list, addr, &amp;amp;(&amp;amp;1+1 |&amp;gt; rem 255))
defp dec_at(list, addr), do: List.update_at(list, addr, &amp;amp;(&amp;amp;1-1 |&amp;gt; rem 255))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First thing to notice is that they start with a &lt;code&gt;defp&lt;/code&gt; not &lt;code&gt;def&lt;/code&gt;.
It means they are private to the module and not visible from the outside.
Both of them take two parameters, a list and an address that represent the position inside the list, and update the corresponding value.
It&amp;rsquo;s easy to guess by their name what they do: &lt;code&gt;inc_at&lt;/code&gt; increment the value of &lt;code&gt;list&lt;/code&gt; at position &lt;code&gt;adrr&lt;/code&gt; and &lt;code&gt;dec_at&lt;/code&gt; decrement it.
We use the facilities provided by the core &lt;code&gt;List&lt;/code&gt; module by calling &lt;code&gt;update_at&lt;/code&gt;, that takes a list, an address and a function that update the value.
As we said in Elixir data types are immutable, so &lt;code&gt;update_at&lt;/code&gt; is returning a copy of the list with the modified value, it is not modifying the value in place.
The only tricky part is understanding the third parameter, the update function.
The &lt;code&gt;&amp;amp;()&lt;/code&gt; is called &lt;a href=&#34;http://elixir-lang.org/getting_started/8.html#8.4-function-capturing&#34;&gt;capture syntax&lt;/a&gt; in Elixir and is basically a shorthand for creating anonymous functions.
Rewriting the same function without it would look like this &lt;code&gt;fn(a) -&amp;gt; a+1 |&amp;gt; rem 255 end&lt;/code&gt;, the capture syntax is more concise and allows us to get rid of the function parameter and use params placeholders (&lt;code&gt;&amp;amp;1&lt;/code&gt; represent the first parameter, &lt;code&gt;&amp;amp;2&lt;/code&gt; the second and so on).&lt;/p&gt;

&lt;p&gt;The other thing you might have noticed, if you are new to Elixir, is the &lt;code&gt;|&amp;gt;&lt;/code&gt; symbol. That&amp;rsquo;s called the pipe operator and act much like a unix pipe, it &lt;code&gt;cat&lt;/code&gt;s the argument(s) on left as &lt;strong&gt;first parameter&lt;/strong&gt; of the function on the right.
So &lt;code&gt;rem &amp;amp;1+1, 255&lt;/code&gt; can be rewritten as &lt;code&gt;&amp;amp;1+1 |&amp;gt; rem 255&lt;/code&gt;.
It has no advantage in this case as number of characters typed, but it makes clearer what we are doing: we are taking the value of the first parameter, adding (or subtracting) 1 to it and then piping the result on the function &lt;code&gt;rem&lt;/code&gt; with the parameter 255.
&lt;code&gt;rem&lt;/code&gt; returns the remainder of the int division, that&amp;rsquo;s how we keep memory values in the byte size range, by going back to zero when the value overflows 255.&lt;/p&gt;

&lt;p&gt;In the same family, but with a different purpose, I created &lt;code&gt;put_at&lt;/code&gt;, that completely replace a value in a list at a speicified address.
Of course this function takes a third parameter, the new value we are putting into the list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp put_at(list, addr, val), do: List.replace_at(list, addr, val)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-real-run-function:5e8426109aae4353298eac2be50da78b&#34;&gt;The real &lt;code&gt;run&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;So what are those parameters we pass to our internal function for?
I&amp;rsquo;ll explain by showing you the final step of our interpreter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(&amp;quot;&amp;quot;, addr, mem, output), do: {addr, mem, output}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first parameter is the program string &lt;em&gt;at this point&lt;/em&gt; of the execution, second is the pointer to the memory cell currently active, third is the current state of the memory tape and the last is the output string we are going to return.
We know our program has ended when the run function is called with and empty string as first parameter.
We then return the triplet containing the current data pointer, the memory cells and the output string.&lt;/p&gt;

&lt;p&gt;Without the previous function our program would not end and it will give us an error like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;** (FunctionClauseError) no function clause matching in Brainfuck.run/4
    iex:25: Brainfuck.run(&amp;quot;&amp;quot;, 0, [0], &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because there is no function matching the pattern with the empty string as first param.&lt;/p&gt;

&lt;p&gt;The second basic function is the generic one that matches a string starting with some character, no matter which,  skips it, and calls run again with the rest of the string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(&amp;lt;&amp;lt;_&amp;gt;&amp;gt; &amp;lt;&amp;gt; rest, addr, mem, output), do: run(rest, addr, mem, output)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this two functions in place we already have a scanner, a completely useless scanner, that skips everything and then returns the initial state.The complete code for this is just a few lines long&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule Brainfuck do
    def run(program), do: run(program, 0, [0], &amp;quot;&amp;quot;)
    # exit program
    defp run(&amp;quot;&amp;quot;, addr, mem, output), do: {addr, mem, output}
    # skip everything
    defp run(&amp;lt;&amp;lt;_&amp;gt;&amp;gt; &amp;lt;&amp;gt; rest, addr, mem, output), do: run(rest, addr, mem, output)
end

Brainfuck.run(&amp;quot;hello world&amp;quot;)
# output: {0, [0], &amp;quot;&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that Elixir matches patterns from top to bottom, so we need to put the function that skips unrecognized commands at the end, otherwise more specific patterns would be ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;basics-strings-and-the-i-o:5e8426109aae4353298eac2be50da78b&#34;&gt;Basics, strings and the I/O&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m gonna start implementing commands, by defining the functions that handle the &lt;code&gt;I\O&lt;/code&gt; operations, basically they output a byte and read a byte from input (in our case &lt;code&gt;stdin&lt;/code&gt;).
To do that, first we need to introduce two more helper functions&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp byte_at(list, addr), do: list |&amp;gt; Enum.at addr
defp char_at(list, addr), do: [list |&amp;gt; byte_at addr] |&amp;gt; to_string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;byte_at&lt;/code&gt; extracts the byte at position &lt;code&gt;addr&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt; (AKA our memory cells), while &lt;code&gt;char_at&lt;/code&gt; returns the same byte as string value.
In Elixir strings are binaries, or, in other words, strings of bits.
To convert a byte value to a string, we cannot simply use &lt;code&gt;to_string&lt;/code&gt; function, because it will convert the byte to its string representation, not to the character rapresented by its value, so we need to wrap it inside [] and make it a byte list (the internal representartion of ASCII strings).
As an experiment, you can start &lt;code&gt;iex&lt;/code&gt; and try this code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;65 |&amp;gt; to_string # print &amp;quot;65&amp;quot;
[65] |&amp;gt; to_string # print &amp;quot;A&amp;quot;
[65, 66, 67] |&amp;gt; to_string # print &amp;quot;ABC&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Handle @op_putc opcode, that appends one byte to &lt;code&gt;output&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(@op_putc &amp;lt;&amp;gt; rest, addr, mem, output) do
    run(rest, addr, mem, output &amp;lt;&amp;gt; (mem |&amp;gt; char_at addr))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When @op_putc is at the beginning of the program, this function call &lt;code&gt;run&lt;/code&gt; with the new output formed by appending the character at the current memory location to the old output.
Rest becomes the new program, while address and memory are unchanged.&lt;/p&gt;

&lt;p&gt;Next is @op_getc, which reads a byte from &lt;code&gt;stdin&lt;/code&gt; and puts it in the current memory location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(@op_getc &amp;lt;&amp;gt; rest, addr, mem, output) do
    val = case IO.getn(&amp;quot;Input\n&amp;quot;, 1) do
        :eof -&amp;gt; 0
        c    -&amp;gt; c
    end
    run(rest, addr, mem |&amp;gt; put_at(addr, val), output)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a bit trickier than the previous, but gives us the opportunity to introduce the &lt;code&gt;case&lt;/code&gt; statement.
In Elixir everything is an expression, and returns a value.
We use this feature to assign to &lt;code&gt;val&lt;/code&gt; the result of the &lt;code&gt;case&lt;/code&gt; expression.
Inside the case we use pattern matching to match the return value of &lt;code&gt;IO.getn&lt;/code&gt;, which, straight from the Elixir interactive help&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Gets a number of bytes from the io device. If the io device is a unicode
device, count implies the number of unicode codepoints to be retrieved.
Otherwise, count is the number of raw bytes to be retrieved. It returns:

  • data - the input characters
  • :eof - end of file was encountered
  • {:error, reason} - other (rare) error condition; for instance, {:error,
    :estale} if reading from an NFS volume
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We read one byte from the input, if it returns &lt;code&gt;:eof&lt;/code&gt;, return 0, if it returns some &lt;code&gt;data&lt;/code&gt;, we return it (it is guaranteed to be one byte long).
We ignore error conditions, since they are very rare, especially in our simple case.
The new memory will have &lt;code&gt;val&lt;/code&gt; value at &lt;code&gt;addr&lt;/code&gt; position.&lt;/p&gt;

&lt;p&gt;Not hard at all until now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/6oA7eED.png&#34; alt=&#34;very easy&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;let-s-talk-about-memory:5e8426109aae4353298eac2be50da78b&#34;&gt;Let&amp;rsquo;s talk about memory&lt;/h3&gt;

&lt;p&gt;There are two opcodes in brainfuck that operates on memory values, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt;.
The implementation is very straightforward&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(@op_vinc &amp;lt;&amp;gt; rest, addr, mem, output) do
    run(rest, addr, mem |&amp;gt; inc_at(addr), output)
end

defp run(@op_vdec &amp;lt;&amp;gt; rest, addr, mem, output) do
    run(rest, addr,  mem |&amp;gt; dec_at(addr), output)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we (hopefully) grasped the basics of the Elixir syntax and how pattern matching is used, it should be pretty easy to understand how these two functions work.&lt;/p&gt;

&lt;p&gt;Last two functions we meet today handle the data pointer.
I&amp;rsquo;ll just show you the two basic cases, when the pointer moves inside the memory length, we&amp;rsquo;ll keep handling the auto expansion of the tape to the left and right for the next part.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defp run(@op_pinc &amp;lt;&amp;gt; rest, addr, mem, output) do
    run(rest, addr+1, mem, output)
end

defp run(@op_pdec &amp;lt;&amp;gt; rest, addr, mem, output) do
    run(rest, addr-1, mem, output)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Almost no need to explain what it is going on, the data pointer is simply incremented or decremented and the new value is passed to &lt;code&gt;run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the next post I&amp;rsquo;ll talk about how to handle expanding the memory tape when needed and, the most fun part, where Elixir capabilities really shine, handling loops and jumps in a very easy way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/wstucco/bc6a5037fe8b1fbf1cf0&#34;&gt;I&amp;rsquo;ve created a gist with all the code presented in this post&lt;/a&gt;, of course it misses loops, but you can use it as a starting point for your own experiments&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The strange case of &#39;Ronca Knives&#39;</title>
      <link>http://massimoronca.it/2014/05/20/the-strange-case-of-ronca-knives.html</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2014/05/20/the-strange-case-of-ronca-knives.html</guid>
      <description>&lt;p&gt;The other day I was looking at my websites stats and I found a spike in visits coming from search engines.&lt;br /&gt;
It is always good news when something catch search engines attention and traffic get redirected to your website.&lt;br /&gt;
Well actually not always &amp;hellip;&lt;br /&gt;
The keywords used to get to me were definitely a bit OT.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://massimoronca.it/assets/images/ronca-knives-stats.png&#34; alt=&#34;Ronca Knives&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My name&amp;rsquo;s Ronca, I wrote an article about &lt;a href=&#34;http://massimoronca.it/2014/05/14/writing-custom-commands-for-drush-the-drupal-swiss-army-knife.html&#34;&gt;Drush, the swiss army knife for Drupal&lt;/a&gt;, but this is totally not my line of work :)&lt;/p&gt;

&lt;p&gt;To be honest, I love knives and I always carry a small one with me.
My grandfather taught me how to recognize them, he used to be a tailor, but he also lived in the country, so he was competent in the fieldwork and had a superb collection of working knives, like this baby here&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://massimoronca.it/assets/images/coltello-da-innesto-6.png&#34; alt=&#34;graft knife&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I imagine that I would have loved to sell knives, maybe not on TV, I don&amp;rsquo;t really like showing myself to big audiences, but I also seriously think that you guys where looking for this knives, not the metaphorical ones I wrote about&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://massimoronca.it/assets/images/44356.jpg&#34; alt=&#34;ronco knives&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I invite you to go to &lt;a href=&#34;https://www.roncocutlery.com/&#34;&gt;their website&lt;/a&gt; and buy everything! those knives look great, as seen on TV!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing custom commands for Drush: the Drupal swiss army knife</title>
      <link>http://massimoronca.it/2014/05/14/writing-custom-commands-for-drush-the-drupal-swiss-army-knife.html</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2014/05/14/writing-custom-commands-for-drush-the-drupal-swiss-army-knife.html</guid>
      <description>&lt;p&gt;Recently I worked on a client project based on the Drupal platform.&lt;br /&gt;
The most important part of the job was automating a data import from a remote source, but instead of writing a script to do the job, I created a command for &lt;a href=&#34;https://github.com/drush-ops/drush&#34;&gt;Drush&lt;/a&gt;.
Quoting from Drush repository site&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Drush is a command-line shell and scripting interface for Drupal, a veritable Swiss Army knife designed to make life easier for those who spend their working hours hacking away at the command prompt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Drush can handle almost every aspect of a Drupal site, from the mundane &lt;a href=&#34;http://www.drushcommands.com/drush-7x/cache&#34;&gt;cache management&lt;/a&gt; to
&lt;a href=&#34;http://www.drushcommands.com/drush-6x/user&#34;&gt;user management&lt;/a&gt;, from &lt;a href=&#34;http://www.drushcommands.com/drush-6x/make&#34;&gt;packaging a Drupal install into a makefile&lt;/a&gt; to
&lt;a href=&#34;http://www.drushcommands.com/drush-6x/pm&#34;&gt;project management&lt;/a&gt; and much more, including a &lt;a href=&#34;http://www.drushcommands.com/drush-6x/sql/sql-cli&#34;&gt;CLI for running sql queries&lt;/a&gt; an &lt;a href=&#34;http://www.drushcommands.com/drush-6x/runserver/runserver&#34;&gt;http server for development&lt;/a&gt; and an &lt;a href=&#34;http://www.drushcommands.com/drush-7x/core/core-rsync&#34;&gt;rsync wrapper&lt;/a&gt;.&lt;br /&gt;
Drush commands can also be executed on remote machines, provided Drush is installed, by specifing the server &lt;a href=&#34;http://deeson-online.co.uk/labs/drupal-drush-aliases-and-how-use-them&#34;&gt;alias&lt;/a&gt; (e.g. &lt;code&gt;drush clear-cache @staging&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;There are different ways of creating Drush scripts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prepending the script with the shebang &lt;code&gt;#!/usr/bin/env drush&lt;/code&gt; or &lt;code&gt;#!/full/path/to/drush&lt;/code&gt; and using
&lt;a href=&#34;http://www.drushcommands.com/&#34;&gt;Drush commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;using Drush php interpreter &lt;code&gt;#!/full/path/to/drush php-script&lt;/code&gt; and using the &lt;a href=&#34;http://api.drush.org/&#34;&gt;Drush
PHP api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;writing custom commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This guide is about the last case.&lt;br /&gt;
Drush commands are much like Rake or Grunt tasks, you give them a name (more like a namespace) and Drush figures out what function must be called.
To create a Drush command, follow these simple steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a &lt;code&gt;namespace.drush.inc&lt;/code&gt; in one of the standard import path&lt;/li&gt;
&lt;li&gt;implement the &lt;code&gt;namespace_drush_command&lt;/code&gt; entry point function&lt;/li&gt;
&lt;li&gt;implement the command functions. By conventions the command functions are called &lt;code&gt;drush_namespace_commandname&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Drush search for commandfiles in the following locations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/path/to/drush/commands&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;system-wide drush commands folder, e.g. &lt;code&gt;/usr/share/drush/commands&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;.drush folder in &lt;code&gt;$HOME&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sites/all/drush&lt;/code&gt; in the current Drupal installation&lt;/li&gt;
&lt;li&gt;all enabled modules folders in the current Drupal installation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Implementing the command&lt;/p&gt;

&lt;p&gt;To implement a Drush command, the script must implement the drush_command hook.
This function must return a data structure containing all the informations that define your custom command.&lt;br /&gt;
As an example we will develop a command that rolls a dice and prints the result.&lt;br /&gt;
We&amp;rsquo;ll use &lt;code&gt;diceroller&lt;/code&gt; as namespace and &lt;code&gt;roll-dice&lt;/code&gt; as command name.&lt;br /&gt;
This is the implementation of the main hook function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
function diceroller_drush_command() {
  $items = array();

  $items[&#39;roll-dice&#39;] = array(
    &#39;description&#39; =&amp;gt; &amp;quot;Roll a dice for your pleasure.&amp;quot;,
    &#39;arguments&#39; =&amp;gt; array(
      &#39;faces&#39; =&amp;gt; &#39;How many faces the dice has? Default is 6, max is 100.&#39;,
    ),
    &#39;options&#39; =&amp;gt; array(
      &#39;rolls&#39; =&amp;gt; &#39;How many times the dice is rolled, default is 1 max is 100&#39;,
    ),
    &#39;examples&#39; =&amp;gt; array(
      &#39;drush drrd 6 --rolls=2&#39; =&amp;gt; &#39;Rolls a 6 faced dice 2 times&#39;,
    ),
    &#39;aliases&#39; =&amp;gt; array(&#39;drrd&#39;),
    &#39;bootstrap&#39; =&amp;gt; DRUSH_BOOTSTRAP_DRUSH,
    // see http://drush.ws/docs/bootstrap.html for detailed informations
    // about the bootstrap values
  );

  return $items;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command is easily implementd this way&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

function drush_diceroller_roll_dice($faces=6) {
  $rolls = 1;

  if ($tmp = drush_get_option(&#39;rolls&#39;)) {
    $rolls = $tmp;
  }  

  drush_print(dt(&#39;Rolling a !faces faced dice !n time(s)&#39;, array(
    &#39;!faces&#39; =&amp;gt; $faces,
    &#39;!n&#39; =&amp;gt; $rolls
  )));
  // for n=0..$rolls
    // roll the nth dice
    // print the result
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case we assume that the &lt;code&gt;--rolls&lt;/code&gt; option contains a number, but we can guarantee that the function parameters are valid implementing the &lt;code&gt;validate&lt;/code&gt; hook (there are others called just before and after the real command function).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

function drush_diceroller_roll_dice_validate($faces=6) {

  if($faces &amp;lt;= 0) {
    return drush_set_error(&#39;DICE_WITH_NO_FACES&#39;, dt(&#39;Cannot roll a dice with no faces!&#39;));
  }
  if($faces &amp;gt; 100) {
    return drush_set_error(&#39;DICE_WITH_TOO_MANY_FACES&#39;, dt(&#39;Cannot roll a sphere!&#39;));
  }

  $rolls = drush_get_option(&#39;rolls&#39;);
  if(isset($rolls)) {
    if(!is_numeric($rolls))
      return drush_set_error(&#39;ROLLS_MUST_BE_INT&#39;, dt(&#39;rolls value must be a number!&#39;));

    if($rolls &amp;lt;= 0)
      return drush_set_error(&#39;NOT_ENOUGH_ROLLS&#39;, dt(&#39;What you\&#39;re asking cannot be done!&#39;));

    if($rolls &amp;gt; 100)
      return drush_set_error(&#39;TOO_MANY_ROLLS&#39;, dt(&#39;I\&#39;m not your slave, roll it by yourself!&#39;));
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we did our job diligently, running &lt;code&gt;drush help roll-dice&lt;/code&gt; should give us this ouput&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Roll a dice for your pleasure.

Examples:
 drush drrd 6 --rolls=2                    Rolls a 6 faced dice 2 times

Arguments:
 faces                                     How many faces the dice has? Default is 6, max is 100.

Options:
 --rolls                                   How many times the dice is rolled, default is 1 max is 100

Aliases: drrd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consult the &lt;a href=&#34;http://api.drush.org/&#34;&gt;Drush api&lt;/a&gt; for a complete list of hooks &lt;a href=&#34;http://api.drush.org/api/drush/functions/6.x&#34;&gt;functions&lt;/a&gt; and &lt;a href=&#34;http://api.drush.org/api/drush/constants/6.x&#34;&gt;constants&lt;/a&gt; or launch &lt;code&gt;drush topic docs-api&lt;/code&gt; from the command line.&lt;br /&gt;
For a complete implementation of a command example, see &lt;code&gt;drush topic docs-examplecommand&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A modern workflow for Wordpress using Docker and Dokku</title>
      <link>http://massimoronca.it/2014/05/13/a-modern-workflow-for-wordpress-using-docker-and-dokku.html</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2014/05/13/a-modern-workflow-for-wordpress-using-docker-and-dokku.html</guid>
      <description>&lt;p&gt;Every developer, sooner or later, had to deal with &lt;a href=&#34;http://wordpress.org/&#34;&gt;WordPress&lt;/a&gt;, given it is one of the most popular Blog/CMS platform, if not &lt;strong&gt;the&lt;/strong&gt; most popular.&lt;br /&gt;
According to Wikipedia, roughly 22% of the web sites run on it, (it means one web site in five) it is widely know by users, &lt;a href=&#34;https://wordpress.org/plugins/&#34;&gt;it has a large community&lt;/a&gt; (over 30 thousand contributed plugins) and it is easily supported by designers.&lt;/p&gt;

&lt;p&gt;Unfortunately WP was targeted at non-developer people, it had a great success as hosted platform, but working with it from the developer perspective, especially if we look at the workflow, looks clunky and outdated.&lt;/p&gt;

&lt;p&gt;Usually it involves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;downloading a tar ball of the latest WordPress stable version&lt;/li&gt;
&lt;li&gt;rename &lt;code&gt;wp-config-sample.php&lt;/code&gt; to &lt;code&gt;wp-config.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if you&amp;rsquo;re using &lt;code&gt;git&lt;/code&gt; (and you should!), add the &lt;code&gt;wp-config.php&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;open a connection (possibly not FTP, but probably it will be FTP) and (slowly) upload everything on the dest server&lt;/li&gt;
&lt;li&gt;create a remote&lt;code&gt;wp-config.php&lt;/code&gt; with the production configuration&lt;/li&gt;
&lt;li&gt;launch the installer&lt;/li&gt;
&lt;li&gt;hope nobody will overwrite &lt;code&gt;wp-config.php&lt;/code&gt; with the local copy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, modern workflows are built around some kind of version control system (usually &lt;code&gt;git&lt;/code&gt;) where the deploy is managed just by pushing a branch on the public server.&lt;br /&gt;
This is called push-to-deploy and is the one used by &lt;a href=&#34;http://heroku.com&#34;&gt;Heroku&lt;/a&gt;.&lt;br /&gt;
Fortunately, some smart guys created &lt;a href=&#34;http://www.docker.io&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://github.com/progrium/dokku&#34;&gt;Dokku&lt;/a&gt;, two projects that make possible to build you own personal-heroku-like &lt;a href=&#34;http://en.wikipedia.org/wiki/Platform_as_a_service&#34;&gt;PaaS&lt;/a&gt; in a matter of minutes (If you want to try it, &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; offers cloud servers with Dokku preinstalled at a starting price of 5$/month).&lt;br /&gt;
Let&amp;rsquo;s see how it applies to WordPress.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the rest of the article I&amp;rsquo;m going to use a few placeholders&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt; is the application name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dokku&lt;/code&gt; is the address (or hostanme if configured) of the destination server running Docker &amp;amp; Dokku&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dokku-user&lt;/code&gt; is the user running Dokku on the remote machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;First of all we&amp;rsquo;re going to clone WP from &lt;a href=&#34;http://www.github.com&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:WordPress/WordPress.git app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we create &lt;code&gt;wp-config.php&lt;/code&gt;, replace the configuration parameters with environment variables, and commit it.&lt;br /&gt;
This way we won&amp;rsquo;t have to hardcode them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;same technique can be used to configure the &lt;a href=&#34;http://codex.wordpress.org/Editing_wp-config.php#Security_Keys&#34;&gt;security keys&lt;/a&gt;, I didn&amp;rsquo;t, to keep things short.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;define(&#39;DB_NAME&#39;, getenv(&#39;WP_DB_NAME&#39;));

/** MySQL database username */
define(&#39;DB_USER&#39;, getenv(&#39;WP_DB_USER&#39;));

/** MySQL database password */
define(&#39;DB_PASSWORD&#39;, getenv(&#39;WP_DB_PASS&#39;));

/** MySQL hostname */
define(&#39;DB_HOST&#39;, getenv(&#39;WP_DB_HOST&#39;));

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add wp-config.php
git commit -m &#39;added WordPress configuration&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use &lt;a href=&#34;http://apache.org/&#34;&gt;Apache&lt;/a&gt;, you can set the values with &lt;a href=&#34;http://httpd.apache.org/docs/2.2/mod/mod_env.html&#34;&gt;&lt;code&gt;SetEnv&lt;/code&gt;&lt;/a&gt;, if you&amp;rsquo;re running &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; and &lt;a href=&#34;http://php-fpm.org/&#34;&gt;phpf-pm&lt;/a&gt;, you can use the &lt;a href=&#34;http://www.php.net/manual/it/install.fpm.configuration.php#example-73&#34;&gt;&lt;code&gt;ENV&lt;/code&gt; section&lt;/a&gt; of your application pool.&lt;br /&gt;
You don&amp;rsquo;t need any of that when deploying through Dokku.&lt;/p&gt;

&lt;p&gt;For our first deploy, we need to add a new &lt;code&gt;remote&lt;/code&gt; pointing at the Dokku  server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add dokku dokku-user@dokku:app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and push the code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push dokku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see something like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Counting objects: 163187, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (33726/33726), done.
Writing objects: 100% (163187/163187), 84.87 MiB | 4.95 MiB/s, done.
Total 163187 (delta 128758), reused 163156 (delta 128730)
-----&amp;gt; Building app ...
       PHP (classic) app detected
-----&amp;gt; Bundling NGINX 1.4.3
-----&amp;gt; Bundling PHP 5.5.5
-----&amp;gt; Bundling extensions
       phpredis
       mongo
-----&amp;gt; Setting up default configuration
-----&amp;gt; Vendoring binaries into slug
-----&amp;gt; Discovering process types
       Default process types for PHP (classic) -&amp;gt; web
-----&amp;gt; Releasing app ...
-----&amp;gt; Deploying app ...
-----&amp;gt; Cleaning up ...
=====&amp;gt; Application deployed:
       http://app_url

To dokku@dokku:app
 * [new branch]      master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, everything is already bundled with the PHP buildpack.&lt;br /&gt;
Dokku has detected the PHP app and instructed Docker to create an isolated container that could run the application.&lt;/p&gt;

&lt;p&gt;You can now open up a browser and point to app_url (it can have two formats: &lt;a href=&#34;http://ip_adress:port&#34;&gt;http://ip_adress:port&lt;/a&gt; or &lt;a href=&#34;http://app.defaultdomain&#34;&gt;http://app.defaultdomain&lt;/a&gt;. Either way, it should launch your app).&lt;/p&gt;

&lt;p&gt;Our wp-config is empty right now, the server will reply with&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/JzhJclD.png&#34; alt=&#34;WP Error&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s good news, it means it is actually responding to our request.&lt;/p&gt;

&lt;p&gt;To finish our setup we need a couple more things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a database&lt;/li&gt;
&lt;li&gt;configure the app environment with the credentials&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a db in our app container, we&amp;rsquo;ll use the &lt;a href=&#34;https://github.com/Kloadut/dokku-md-plugin&#34;&gt;MariaDB plugin for Dokku&lt;/a&gt;.&lt;br /&gt;
There&amp;rsquo;s also a &lt;a href=&#34;https://github.com/hughfletcher/dokku-mysql-plugin&#34;&gt;MySQL plugin&lt;/a&gt;, but it has some annoying bug and since MySQL and MariaDB
are virtually identical, we&amp;rsquo;ll stick with the last one.&lt;br /&gt;
Installing a plugin for Dokku is as easy as running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /var/lib/dokku/plugins
git clone https://github.com/Kloadut/dokku-md-plugin mariadb
dokku plugins-install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some of them don&amp;rsquo;t require the final &lt;code&gt;plugins-install&lt;/code&gt; step, but it won&amp;rsquo;t hurt if you run it anyway.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: you can run dokku commands on your local machine and execute them on the remote one with:
&lt;code&gt;ssh dokku-host dokku-command&lt;/code&gt; (i.e. &lt;code&gt;ssh dokku help&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can now create the database&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
 ssh dokku mariadb:create app

 -----&amp;gt; Creating /home/dokku/app/ENV
-----&amp;gt; Setting config vars and restarting app
DATABASE_URL: mysql2://root:VQpzDZRrEUAkUuAI@172.17.42.1:49170/db
-----&amp;gt; Releasing app ...
-----&amp;gt; Release complete!
-----&amp;gt; Deploying app ...
-----&amp;gt; Deploy complete!

-----&amp;gt; app linked to mariadb/app database

-----&amp;gt; MariaDB container created: mariadb/app

       Host: 172.17.42.1
       Port: 49170
       User: &#39;root&#39;
       Password: &#39;VQpzDZRrEUAkUuAI&#39;
       Database: &#39;db&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and set set the Environment variables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; # the format is dokku config:set app key=value key=value
 # I splitted up the command on different lines for clarity
 ssh dokku config:set app WP_DB_HOST=&#39;172.17.42.1:49170&#39;
 ssh dokku config:set app WP_DB_NAME=&#39;db&#39;
 ssh dokku config:set app WP_DB_USER=&#39;root&#39;
 ssh dokku config:set app WP_DB_PASS=&#39;VQpzDZRrEUAkUuAI&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything went right, you should now see the standard WordPress install.&lt;br /&gt;
Choose a title, create an admin user and you&amp;rsquo;re ready to go.&lt;br /&gt;
You can work on your local copy, add plugins, work on your theme, and when you&amp;rsquo;re happy with it, you push all the changes and the app is automatically deployed and configured.&lt;/p&gt;

&lt;p&gt;We just scratched the surface of what is possible with Docker &amp;amp; Dokku.&lt;br /&gt;
In a next article we&amp;rsquo;ll see how to create a Dokku plugin to automate the entire process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taming the processing loop</title>
      <link>http://massimoronca.it/2014/04/09/taming-the-processing-loop.html</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://massimoronca.it/2014/04/09/taming-the-processing-loop.html</guid>
      <description>&lt;p&gt;In Mikamai we do a lot of reasearch on &lt;a href=&#34;http://dev.mikamai.com/post/78652180658/how-to-program-an-attiny85-or-attiny45-with-an&#34;&gt;non&lt;/a&gt; &lt;a href=&#34;http://dev.mikamai.com/post/78453410376/let-your-raspberry-pi-see-this-wonderful-world&#34;&gt;conventional&lt;/a&gt; &lt;a href=&#34;http://dev.mikamai.com/post/69163914657/intel-galileo-getting-started-with-mac-os-x&#34;&gt;hardware&lt;/a&gt;, we make &lt;a href=&#34;http://dev.mikamai.com/post/76945627390/you-cant-touch-this-an-evil-arduino-based-alarm&#34;&gt;prototypes&lt;/a&gt; or create unsual interfaces that are very domain specific.&lt;/p&gt;

&lt;p&gt;Like this one&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://scontent-b-ams.xx.fbcdn.net/hphotos-ash3/t1.0-9/994503_10151525258526336_667825845_n.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Seriously, we did it.&lt;/p&gt;

&lt;p&gt;To quickly sketch ideas, we often rely on &lt;a href=&#34;http://www.processing.org/&#34;&gt;Processing&lt;/a&gt;, it&amp;rsquo;s super easy and its loop based execution model gives the feeling of programming a video game.&lt;br /&gt;
The drawback is that it is so fast to get something working, that you will be tempted to make the mistake of creating a &lt;a href=&#34;http://foxdellfolio.com/the-perils-of-a-polished-prototype/&#34;&gt;polished prototpe&lt;/a&gt;.&lt;br /&gt;
Your prototype code ends up in production and there&amp;rsquo;s no way back from there.&lt;/p&gt;

&lt;p&gt;To resist the temptation of releasing a blob of code, I borrowed &lt;a href=&#34;https://www.youtube.com/watch?v=HxaD_trXwRE&#34;&gt;a technique from  one of the Rob Pike&amp;rsquo;s talks&lt;/a&gt; to keep things easy, while keeping them clean at the same time.&lt;/p&gt;

&lt;p&gt;It is basically an implementation of a state machime.&lt;br /&gt;
We&amp;rsquo;re gonna have a &lt;code&gt;StateMachine&lt;/code&gt; class that handles the inputs and the state changes, and several state classes that implement the &lt;code&gt;State&lt;/code&gt; interface.&lt;br /&gt;
The interface is very simple and contains only one method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface State {
	  public State nextState();  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop of our Processing application is really simple too&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;StateMachine sm = new StateMachine(initialstate);
void draw() {
  sm = sm.nextState();  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this is the most basic implementation possible of the &lt;code&gt;StateMachine&lt;/code&gt; class&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class StateMachine(State initialstate) {
  private State currentstate;

  StateMachine(State initialstate) {
    this.currentstate = initialstate;
  }

  public StateMachine nextState() {
    this.currentstate = this.currentstate.nextState();
   	return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each class must implement the &lt;code&gt;nextState&lt;/code&gt; method and return an istance of the next state that will be executed.&lt;br /&gt;
With this knowledge in mind, this is how you build an infinite loop inside an inifinite loop&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class InfiniteLoopState implements State {
	public State nextState() {
	    return this;
  	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we can do better!&lt;br /&gt;
How about a ping pong?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Ping implements State {
	public State nextState() {
		println(&amp;quot;ping?&amp;quot;);
	    return new PongState();
  	}
}

class Pong implements State {
	public State nextState() {
		println(&amp;quot;pong!&amp;quot;);
	    return new PingState();
  	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We moved the logic of the application out of the central &lt;code&gt;switch/case&lt;/code&gt; statement in the &lt;code&gt;draw&lt;/code&gt; function and deconstruted it into smaller pieces, that only know about themselves and the next state they are going to emit.&lt;/p&gt;

&lt;p&gt;As long as your state classes implement the &lt;code&gt;State&lt;/code&gt; interface you can exapnd the concept to fit your needs.&lt;br /&gt;
For example, if you need to keep track of the environment and/or the previous state, you can adjust the &lt;code&gt;State&lt;/code&gt; interface to support it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;interface State {
	  public State nextState(State previousstate, StateMachine sm);  
	  // StateMachine holds the environment for us
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and modify &lt;code&gt;StateMachine&lt;/code&gt; accordingly&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public StateMachine nextState() {
  this.currentstate = this.currentstate.nextState(this.currentstate, this);
 	return this;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; state machines are easy, use them!&lt;/p&gt;

&lt;p&gt;You can find examples on how to use this pattern and how to add more features in the &lt;a href=&#34;https://github.com/wstucco/processing_state_machine&#34;&gt;github repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>